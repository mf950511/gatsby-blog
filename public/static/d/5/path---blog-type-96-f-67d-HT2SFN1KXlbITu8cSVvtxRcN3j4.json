{"data":{"markdownRemark":{"html":"<h1>类型</h1>\n<h2>内置类型</h2>\n<ul>\n<li>内置类型有哪些？如何校验？</li>\n<li>特殊类型有哪些？注意事项是？</li>\n</ul>\n<h2>问题解释</h2>\n<ul>\n<li>内置类型为空值<code>(null)</code>，未定义<code>(undefined)</code>，布尔值<code>(boolean)</code>，数字<code>(number)</code>，字符串<code>(string)</code>，对象<code>(object)</code>，符号<code>(symbol,ES6新增)</code></li>\n<li>\n<p>特殊类型为空值(特殊对象)，数组(特殊对象)，函数(特殊对象)</p>\n<!--more-->\n</li>\n<li>类型校验</li>\n</ul>\n<pre><code class=\"language-js\">typeof undefined === 'undefined' //true\ntypeof true === 'boolean' //true\ntypeof 42 === 'number' //true\ntypeof '42' === 'string' //true\ntypeof {a:2} === 'object' //true\ntypeof Symbol() === 'symbol' //true\n// 特殊情况\ntypeof null === 'object' //true\ntypeof [1,2,3] === 'object' //true\ntypeof function(){} === 'function' // true\n</code></pre>\n<h2>校验方式</h2>\n<ul>\n<li>校验null (!a &#x26;&#x26; typeof a ==='object') //true</li>\n<li>校验数组 arr.constructor === Array 或 arr instanceof Array</li>\n</ul>\n<h2>数组</h2>\n<ul>\n<li>数组可以容纳任何类型的值，无需设定大小</li>\n<li>delete运算符可以将单元从数组中删除，但，删除后，数组length属性不会发生变化</li>\n<li>数组通过数组进行索引，但因为它是对象的本质，所以也可以包含字符串键值与属性<code>(但并不计算在数组长度内)</code></li>\n</ul>\n<pre><code class=\"language-js\">    var a = []\n    a[0] = 1\n    a['foo'] = 2\n    a.length; // 1\n    a['foo']; // 2\n    a.foo;    // 2\n</code></pre>\n<ul>\n<li>注意点：若字符串键值能强制转换为数字的话，会被当作数字索引来处理</li>\n</ul>\n<pre><code class=\"language-js\">      var a = []\n      a['13'] = 42\n      a.length; // 14\n</code></pre>\n<ul>\n<li>Array.from()可将类数组对象转为数组对象，例（arguments,dom列表）</li>\n</ul>\n<h2>字符串与字符串数组</h2>\n<ul>\n<li>都具有<code>length</code>属性与<code>indexOf</code>方法和<code>concat</code>方法</li>\n</ul>\n<pre><code class=\"language-js\">    var a = 'foo'\n    var b = ['f','o','o']\n\n    a.length; // 3\n    b.length; //3\n\n    a.indexOf('o') // 1\n    b.indexOf('o') // 1\n    var c = a.concat('bar') //foobar\n    var d = b.concat(['b', 'a', 'r']) // ['f', 'o', 'o', 'b', 'a', 'r']\n</code></pre>\n<ul>\n<li>字符串没有数组函数，但可以借用数组的非变更方法来处理</li>\n</ul>\n<pre><code class=\"language-js\">    var c = Array.prototype.join.call(a, '-')\n    var d = Array.prototype.map.call(a, function(v) {\n      return v.toUpperCase() + '.'\n    }).join(\"\")\n    c; //\"f-o-o\"\n    d: //\"f.o.o\"\n</code></pre>\n<ul>\n<li>不可借用数组的可变成员函数reverse,因为字符串是不可变的<code>Array.prototype.reserve.call(a)</code>无效</li>\n<li>处理方法：</li>\n</ul>\n<pre><code class=\"language-js\">    var c = a.split(\"\").reverse().join(\"\")\n</code></pre>\n<h2>数字</h2>\n<ul>\n<li>检测是否是整数 <code>Number.isInteger()</code></li>\n<li>检测是狗是安全整数 <code>Number.isSafeInteger()</code></li>\n<li>检测是否是NaN <code>Number.isNaN()</code></li>\n<li>检测两个值是否绝对相等 <code>Object.is(a, b)</code></li>\n</ul>\n<h2>奇特的小技巧</h2>\n<ul>\n<li>~运算符可将结果强制类型转换为真值/假值</li>\n</ul>\n<pre><code class=\"language-js\">    var a = \"Hello world\"\n    if(~a.indexOf('lo')) { // true\n      // 找到匹配\n    }\n    // 相应的 !~a.indexOf('lo')为未找到匹配\n</code></pre>","frontmatter":{"title":"你不知道的javascript-类型","date":"2019-01-03T00:00:00.000Z","tags":["JavaScript","入门"],"categories":"JavaScript"},"fields":{"slug":"/type/"}}},"pageContext":{"slug":"/type/"}}