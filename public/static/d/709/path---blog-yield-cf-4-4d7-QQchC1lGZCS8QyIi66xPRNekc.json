{"data":{"markdownRemark":{"html":"<h1>生成器详解</h1>\n<h2>生成器</h2>\n<ul>\n<li>生成器是什么？为什么会需要生成器？</li>\n</ul>\n<h2>生成器的由来</h2>\n<ul>\n<li>传统异步流程对程序员并不友好，设定回调函数的方式不符合大脑对任务步骤的规划</li>\n<li>生成器就是实现看似同步的异步流程控制</li>\n</ul>\n<!--more-->\n<h1>生成器的奇特之处</h1>\n<h2>打破完整运行</h2>\n<ul>\n<li>传统意义上，<code>javascript</code>函数一旦开始运行，那么在结束之前将没有别的代码可以打断并插入运行</li>\n<li>ES6引入了新的函数类型，并不符合从始到终不可打断的原则，这类新的函数就是生成器</li>\n</ul>\n<pre><code class=\"language-js\">  var x = 1;\n  function foo() {\n    x++\n    bar();\n    console.log( \"x:\", x )\n  }\n  function bar() {\n    x++\n  }\n  foo(); // x: 3 \n</code></pre>\n<ul>\n<li>这里因为<code>bar</code>存在于<code>foo</code>内部，所以可以实现<code>x</code>的改变，那如过在外面调用<code>bar</code>有没有可能改变<code>x</code>的输出呐？</li>\n<li>如果在多线程语言中，这个自然可以通过抢占线程来实现，但javascript是一个单线程的语言。但是，要是我们通过让<code>foo</code>暂停然后先执行<code>bar</code>会怎么样呐？</li>\n<li>下面就是我们用生成器来实现的效果</li>\n</ul>\n<pre><code class=\"language-js\">  var x = 1;\n  function *foo() {\n    x++;\n    yield; // 暂停！\n    console.log( \"x:\", x );\n  }\n  function bar() {\n    x++;\n  } \n  // 构造一个迭代器it来控制这个生成器\n  var it = foo();\n  // 这里启动foo()！\n  it.next();\n  x; // 2\n  bar();\n  x; // 3\n  it.next(); // x: 3\n</code></pre>\n<ul>\n<li><code>it=foo()</code> 运算其实只是生成了一个迭代器，并没有执行生成器（迭代器在下面会介绍）</li>\n<li>第一个<code>it.next()</code>执行了生成器，也就运行了<code>*foo</code>代码里的<code>x++</code>这一句，停在了<code>yield</code></li>\n<li><code>*foo</code>停在了<code>yield</code>这里，第一个<code>it.next</code>调用结束，暂停了<code>foo</code>,此时<code>x</code>值变为<code>2</code></li>\n<li>暂停<code>foo</code>后我们执行了<code>bar</code>函数使<code>x</code>变为<code>3</code></li>\n<li>最后一个<code>it.next</code>将生成器恢复了，使其完成代码块的执行，打印了<code>3</code></li>\n<li>这里我们也能发现，生成器函数与普通函数相比函数名之前会多一个<code>*</code>,并且函数执行过程碰到<code>yield</code>会被暂停</li>\n</ul>\n<h2>输入与输出</h2>\n<ul>\n<li>生成器作为一个函数，除了有新的执行模式，还具备一般函数的基本特性，可接受参数与返回值</li>\n</ul>\n<pre><code class=\"language-js\">function *foo(x,y) {\n  return x * y;\n}\nvar it = foo( 6, 7 ); \nvar res = it.next();\nres.value; // 42 \n</code></pre>\n<ul>\n<li>生成器的传参，返回值与传统函数一致</li>\n<li>注意：这里我们能看到<code>foo(6,7)</code>并没有像普通函数一样执行，是因为这一步只是执行了迭代器的生成并赋值给了it,然后我们才可以对其进行暂停与恢复</li>\n<li><code>it.next</code>是让生成器从当前位置继续运行，直到碰到下一个yield或者生成器代码执行结束</li>\n<li><code>it.next</code>调用的结果是一个对象，有<code>value</code>属性，值为生成器返回的值(如果有的话)</li>\n</ul>\n<h2>迭代器消息传递</h2>\n<ul>\n<li>迭代器除了控制生成器之外，还提供了消息的输入与输出，通过yield与next(..)实现</li>\n</ul>\n<pre><code class=\"language-js\">function *foo(x) {\n  var y = x * (yield);\n  return y;\n}\nvar it = foo( 6 );\n// 启动foo(..)\nit.next();\nvar res = it.next( 7 );\nres.value; // 42 \n</code></pre>\n<ul>\n<li>这里是外部消息的输入，<code>foo</code>函数接受原始参数6，之后执行到了<code>yield</code>这一步暂停，并要求调用代码即<code>it.next</code>为<code>yield</code>提供一个结果值</li>\n<li>第二个<code>it.next</code>作为<code>yield</code>的恢复调用理所当然的需要提供一个值，也就是我们的7</li>\n<li>所以函数内部<code>y = x * (yield)</code> 其实就是<code>y = 6 * 7</code>即<code>42</code></li>\n<li>这里我们要注意，迭代器的<code>next</code>总要比生成器的<code>yield</code>多一个，因为它需要第一个<code>next</code>来启动生成器，其后才是每次遇到<code>yield</code>暂停，<code>next</code>恢复</li>\n</ul>\n<pre><code class=\"language-js\">function *foo(x) {\n  var y = x * (yield \"Hello\"); // &#x3C;-- yield一个值！\n  return y;\n}\nvar it = foo( 6 );\nvar res = it.next(); // 第一个next()，并不传入任何东西\nres.value // \"Hello\"\nres = it.next( 7 ); // 向等待的yield传入7\nres.value; // 42 \n</code></pre>\n<ul>\n<li>这里与上面的改动在于<code>yield</code>之后跟了一个数据'Hello'，它其实是<code>yield</code>传给外面的数据，用来响应<code>next</code>的调用，可以理解为我启动了你要是暂停得给我个解释啊，抛出的一个返回值</li>\n<li>上面也就是我们生成器的消息互通，通过yield与next构成消息的双向传递</li>\n</ul>\n<h1>迭代器</h1>\n<h2>为什么需要迭代器</h2>\n<ul>\n<li>生成器是对函数的暂停与恢复执行，那么在多次暂停时就需要有东西来保存其暂停时的值，而迭代器的作用也就凸现出来了</li>\n<li>迭代器是一个定义良好的接口，可以从一个生产者一步步得到一系列的值</li>\n</ul>\n<pre><code class=\"language-js\">  var something = (function(){\n    var nextVal;\n    return {\n      // for..of循环需要\n      [Symbol.iterator]: function(){ return this; },\n      // 标准迭代器接口方法\n      next: function(){\n        if (nextVal === undefined) {\n          nextVal = 1;\n        }\n        else {\n          nextVal = (3 * nextVal) + 6;\n        }\n        return { done:false, value:nextVal };\n      }\n    };\n  })();\n  something.next().value; // 1\n  something.next().value; // 9\n  something.next().value; // 33\n  something.next().value; // 105 \n</code></pre>\n<ul>\n<li>上面就是一个标准的数字生产迭代器，<code>Symbol.iterator</code>存在的原因是ES6开始要想从一个可迭代对象中提取迭代器，则该对象必须是ES6符号值<code>Symbol.iterator</code>,调用这个函数会返回一个迭代器</li>\n<li>这里我们可以通过<code>next</code>方法返回一个对象，该对象有两个属性值：<code>done</code>为boolean值，标识迭代器的完成状态，<code>value</code>返回迭代值</li>\n</ul>\n<h2>生成器与迭代器</h2>\n<ul>\n<li>上面就是迭代器的作用与简单实现，这里我们就可以知道当我们执行<code>it=foo()</code>这一步时为什么会返回一个迭代器了</li>\n<li>严格来说生成器本身并不是一个<code>iterable(可迭代对象)</code>,但当你执行一个生成器时，就得到了一个迭代器</li>\n</ul>\n<pre><code class=\"language-js\">function *foo(){ .. }\nvar it = foo(); \n</code></pre>\n<ul>\n<li>生成器通过执行返回一个迭代器也就可以实现生成器的无限次暂停与恢复</li>\n</ul>\n<h1>生成器与异步编程模式</h1>\n<h2>生成器与异步回调</h2>\n<ul>\n<li>在传统的异步函数ajax中，我们为了实现异步数据获取通常会使用异步回调的方法，如下</li>\n</ul>\n<pre><code class=\"language-js\">function foo(x,y,cb) {\n  ajax(\n  \"http://some.url.1/?x=\" + x + \"&#x26;y=\" + y,\n  cb\n  );\n}\nfoo( 11, 31, function(err,text) {\n  if (err) {\n    console.error( err );\n  }\n  else {\n    console.log( text );\n  }\n} ); \n</code></pre>\n<ul>\n<li>但是有了生成器之后我们就可以这么实现了</li>\n</ul>\n<pre><code class=\"language-js\">function foo(x,y) {\n  ajax(\n    \"http://some.url.1/?x=\" + x + \"&#x26;y=\" + y,\n    function(err,data){\n      if (err) {\n        // 向*main()抛出一个错误\n        it.throw( err );\n      }\n      else {\n        // 用收到的data恢复*main()\n        it.next( data );\n      }\n    }\n  );\n}\nfunction *main() {\n  try {\n    var text = yield foo( 11, 31 ); \n    console.log( text );\n  }\n  catch (err) {\n    console.error( err );\n  }\n}\nvar it = main();\n// 这里启动！\nit.next(); \n</code></pre>\n<ul>\n<li>这里的代码看上去比上面的好像要长一点，但是这段代码比上面的代码要好得多</li>\n<li>这段代码好像变成了之前的同步代码，在有异步请求的时候还能运行吗？当然是可以的，主要原因就在<code>yield</code>身上，当我们执行生成器<code>main</code>的时候，遇到<code>yield</code>后暂停了<code>foo(11,31)</code>后面的其他代码，等待迭代器的下一个next来恢复它的执行</li>\n<li>当我们的<code>ajax</code>执行完成后，调用了<code>next</code>方法来恢复它，并把ajax的返回值传递给了生成器，使其赋值给了<code>text</code>，接着让<code>main</code>继续执行</li>\n</ul>\n<h2>总结</h2>\n<ul>\n<li>生成器其实就是可以暂停执行与继续执行的函数，暂停与执行使用过迭代器来实现的</li>\n<li>生成器的主要作用就是解决传统异步编码回调问题，实现原理就是暂停后需要next来恢复，<code>next</code>与<code>yield</code>可以双向通信传递数据，可借此传递异步请求的数据</li>\n</ul>","frontmatter":{"title":"ES2015生成器","date":"2019-02-28T00:00:00.000Z","tags":["JavaScript","ES2015","进修"],"categories":"JavaScript"},"fields":{"slug":"/yield/"}}},"pageContext":{"slug":"/yield/"}}