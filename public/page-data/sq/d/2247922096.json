{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"47d99568-02b9-5409-bd41-7d2ca3d8aa46","frontmatter":{"title":"从零搭建一个react-hooks项目（五）","date":"18 September, 2020","name":"francis"},"fields":{"slug":"/react_md_5/"},"excerpt":"从零搭建一个react-hooks项目（五） 项目完成大概建起来了，但是当我打个生产包的时候都快哭了，一开始使用的devtool: \"source-map\"，用时高达 34 s，这当然是不可容忍的 然后我们先将devtool改为\"none\"，然后发现变为了29s…"}},{"node":{"id":"10bf3d13-e4ff-560f-957c-e46948b6ab86","frontmatter":{"title":"react hooks下封装通用redux","date":"14 July, 2020","name":"francis"},"fields":{"slug":"/react_hooks/"},"excerpt":"react hooks下封装通用redux redux我们常用来做全局状态管理，一般我们都会按功能模块来新建相关的action，reducer然后再使用combineReducers…"}},{"node":{"id":"27a437dd-790d-5c21-9a1b-770e2bab34d9","frontmatter":{"title":"从零搭建一个react-hooks项目（四）","date":"24 June, 2020","name":"francis"},"fields":{"slug":"/react_md_4/"},"excerpt":"从零搭建一个react-hooks项目（四） 前面我们搭建了基于react与typescript的开发环境，接下来就是我们项目开发中遇到的一些问题处理了 图片引入申明报错问题处理 之前我们配置了图片引入并且在页面中进行了图片引入，当我们把页面变为ts…"}},{"node":{"id":"d9ecc39e-d066-523f-88bb-62f4f055536c","frontmatter":{"title":"从零搭建一个react-hooks项目（三）","date":"23 June, 2020","name":"francis"},"fields":{"slug":"/react_md_3/"},"excerpt":"从零搭建一个react-hooks项目（三） 上一篇我们配置了项目相关，包括代码压缩混淆，开发生产配置抽离，图片与文字的引入使用等 接下来我们就配置一下react-router，react-redux与typescript 配置之前我们先补充一下webpack…"}},{"node":{"id":"7661f399-ad6d-5960-bc28-1894afcf1db3","frontmatter":{"title":"从零搭建一个react-hooks项目（二）","date":"12 June, 2020","name":"francis"},"fields":{"slug":"/react_md_2/"},"excerpt":"从零搭建一个react-hooks项目（二） 上一篇搭建了基本的webpack项目，可以支持react，less的基本使用，但是没有考虑到项目中的实际情况，例如生产环境的代码混淆，代码压缩，开发环境的热启动等。 下面我们就针对开发与生产环境的不同需求，对webpack…"}},{"node":{"id":"1e5e6612-8e10-5280-8cf6-aa67cc21fe69","frontmatter":{"title":"react hooks下使用react-redux","date":"11 June, 2020","name":"francis"},"fields":{"slug":"/redux-hooks/"},"excerpt":"react hooks 下使用redux redux redux是近年来javascript中火热的状态管理容器，提供可预测的全局状态管理。在大型的应用中我们常采用redux来进行状态管理，redux的基本使用方式如下 使用redux，我们先要进行action的编写，action…"}},{"node":{"id":"a2b00b27-2883-5073-9ded-36ed713d86b5","frontmatter":{"title":"从零搭建一个react-hooks项目（一）","date":"11 June, 2020","name":"francis"},"fields":{"slug":"/react_md_1/"},"excerpt":"从零搭建一个react-hooks项目（一） 最近有打算仿vue-admin项目构造一个react的项目，不引用官方脚手架，从webpack开始配置一套基于react,redux,typescript的项目，并实时记录一下项目中的一些配置情况 首先搭建一个基本的webpack…"}},{"node":{"id":"987e3bfc-e324-5d24-b3e6-50e0efa5659b","frontmatter":{"title":"JavaScript中实现数据结构队列","date":"02 January, 2020","name":"francis"},"fields":{"slug":"/quene/"},"excerpt":"队列 队列也是我们编程当中经常用到的一个数据结构，具有先入先出的特性，跟平时我们的排队一样，先进来先走 同样，JavaScript…"}},{"node":{"id":"b774f0ec-86ae-51d6-be83-4eb63bdba932","frontmatter":{"title":"JavaScript中实现数据结构栈","date":"25 December, 2019","name":"francis"},"fields":{"slug":"/stack/"},"excerpt":"栈 栈是我们经常听到的数据结构，拥有后入先出的特性，可以理解为存放箱子的过程，存的时候后来的都放到先来的上面，取得时候也是从上面往下取，因为上面都是后来的箱子，所以会被先取出来 JavaScript…"}},{"node":{"id":"7fcba351-eefd-5c24-895f-cc06059bbc39","frontmatter":{"title":"事件绑定的两种优化方式","date":"01 November, 2019","name":"francis"},"fields":{"slug":"/lazy_event/"},"excerpt":"…"}},{"node":{"id":"10195f41-311b-5b2f-b8f7-031f23af5fca","frontmatter":{"title":"storage工具类的封装","date":"01 November, 2019","name":"francis"},"fields":{"slug":"/storage/"},"excerpt":"Storage工具类的封装 日常开发中我们都会涉及到前端数据的存储，对一些需要长期保存在客户端的数据，我们通常会采用浏览器提供的localStorage对象，简称Storage对象。 由于所有的页面处于同一个浏览器环境下，所以各个开发工程师所存储的Storage…"}},{"node":{"id":"1e3fb51b-a78e-5ecc-898a-0c72db60797c","frontmatter":{"title":"字符串模板的实现","date":"01 November, 2019","name":"francis"},"fields":{"slug":"/string_template/"},"excerpt":"字符串模板的实现 字符串模板是针对大批量、多频率操作dom的解决方案，比如我们要根据数据动态创建一个多嵌套的元素并将其插入到页面中，如果我们采用常规创建dom元素的方式进行插，代码量会极其庞大，下面就是常规方式实现的功能 上面的方式可以看到在大批量的创造dom…"}},{"node":{"id":"5260aff9-1462-50b5-a403-a5ae6ddc4f89","frontmatter":{"title":"迭代器在轮播图中的应用","date":"31 October, 2019","name":"francis"},"fields":{"slug":"/iterator_loop/"},"excerpt":"…"}},{"node":{"id":"b90fadb3-a9e6-5a3b-a13f-65f66cb05168","frontmatter":{"title":"jquery选择器的实现","date":"31 October, 2019","name":"francis"},"fields":{"slug":"/jQuery/"},"excerpt":"jQuery选择器的简单实现 jQuery是前几年前端开发中的老大哥了，而我们最喜欢的也是他提供的选择器跟链式调用的方法了，最近在看了原型与原型链之后也是有点简单的想法，想尝试着实现以下jquery的选择器 首先需要构建一个函数A可以接受一个id…"}},{"node":{"id":"c57ed423-bb25-5bdd-af39-b41eaea239df","frontmatter":{"title":"JavaScript中的设计模式——工厂模式","date":"16 October, 2019","name":"francis"},"fields":{"slug":"/factory_mode/"},"excerpt":"JavaScript…"}},{"node":{"id":"9c66a817-b4c3-57be-86e9-8b84827c0f2e","frontmatter":{"title":"JavaScript中的继承（二）","date":"15 October, 2019","name":"francis"},"fields":{"slug":"/extends_new_2/"},"excerpt":"js…"}},{"node":{"id":"ba9bcf08-a4ac-5ba8-9e78-df793bedee45","frontmatter":{"title":"JavaScript中的继承","date":"14 October, 2019","name":"francis"},"fields":{"slug":"/extends_new/"},"excerpt":"js中的继承（一） 之前也写过一篇关于js继承的一篇文章，不过是在刚开始了解继承的时候写的一篇，看了很多别人的博客，似懂非懂的情况下写了那篇，最近再看js设计模式的时候再次看到了它，也想比较详细的再写一篇 因为js中没有类，所以一般会以函数内部使用this…"}},{"node":{"id":"4f438f27-270c-5d95-ba27-a1bcdc4ddd69","frontmatter":{"title":"JavaScript中new的原理与手动实现一个new","date":"14 October, 2019","name":"francis"},"fields":{"slug":"/new/"},"excerpt":"new的原理与实现 在javascript中我们经常看到在实例化某个类的时候都会在构造函数前面加一个new调用函数来获取我们的实例，但却没有想过new这个操作符在这里面做了什么，是如何生成的实例，所以这段时间我也大概了解了下new…"}},{"node":{"id":"5c0967d0-828a-5f08-b585-15afa421c743","frontmatter":{"title":"JavaScript中的继承","date":"21 March, 2019","name":"Francis"},"fields":{"slug":"/extends/"},"excerpt":"继承的实现与原理 继承 继承是面向对象中的一个特性，与多态，封装称为面向对象的三个基本特征 使用继承可以使一个对象快速拥有另一个对象的属性与方法，并能够重新定义自己的方法 JavaScript中并没有真正的类，所以实现继承可以通过原型链或者通过改变this来实现伪造对象继承 ES…"}},{"node":{"id":"157b0706-cf21-55b9-a1d3-1c9532e2b16b","frontmatter":{"title":"JavaScript语言精粹-对象","date":"14 March, 2019","name":"Francis"},"fields":{"slug":"/goodJavaScript_object/"},"excerpt":"JavaScript中的对象 原型 每个对象都连接到一个原型对象，并且可以继承原型对象的属性 通过字面量创建的对象都会连接到Object.prototype，它是JavaScript中的标配对象 我们可以在创建对象的时候选择另一个对象作为它的原型 ES5中提供的Object…"}},{"node":{"id":"2f1004a2-59eb-58e6-9723-6b52f9765418","frontmatter":{"title":"ES2015迭代器","date":"12 March, 2019","name":"Francis"},"fields":{"slug":"/iterator/"},"excerpt":"一脸懵逼的迭代器 迭代器 迭代器：迭代器是一个结构化的模式，用于从一个源一次一个的方式获取数据 JavaScript开发中从来不缺乏它的出现，总有各种各样的方法来实现它 ES…"}},{"node":{"id":"8651f538-ba17-5f88-8f44-7fe8a87f5f09","frontmatter":{"title":"ES2016字符串模板","date":"11 March, 2019","name":"Francis"},"fields":{"slug":"/js_template/"},"excerpt":"深入字符串模板 字符串模板 ES5之前我们连接字符串与变量还需要使用js的+运算符进行连接 ES…"}},{"node":{"id":"8e447136-8742-5a4a-b41b-fc01cf68bdcc","frontmatter":{"title":"ES2015生成器","date":"28 February, 2019","name":"Francis"},"fields":{"slug":"/yield/"},"excerpt":"生成器详解 生成器 生成器是什么？为什么会需要生成器？ 生成器的由来 传统异步流程对程序员并不友好，设定回调函数的方式不符合大脑对任务步骤的规划 生成器就是实现看似同步的异步流程控制 生成器的奇特之处 打破完整运行 传统意义上，javascript…"}},{"node":{"id":"0c842a9b-8999-56f9-b6c3-d5cf6767aba7","frontmatter":{"title":"javascript回顾","date":"27 February, 2019","name":"francis"},"fields":{"slug":"/call-apply/"},"excerpt":"call,apply,bind详解 call,apply,bind的使用 call,apply,bind的作用是什么？用法是什么？ call,apply,bind之间有什么联系？区别是什么？ 问题详解 功能上，call，apply，bind都可以用来改变函数内部this…"}},{"node":{"id":"d52b4576-3b11-5df2-9492-7dd725a57c96","frontmatter":{"title":"HTTP与TCP/IP了解","date":"26 February, 2019","name":"francis"},"fields":{"slug":"/TCP-IP-ThreeHandShake/"},"excerpt":"TCP协议的3次握手与4次分手 TCP协议的连接与断开 什么是TCP协议的三次握手？为什么会有三次握手？ 什么是TCP协议的四次分手？为什么会有四次分手？ 问题解释 TCP的三次握手其实是在客户端与服务端建立一个TCP连接，在TCP/IP…"}},{"node":{"id":"98385bee-2c91-5358-a343-4a22123906b4","frontmatter":{"title":"你不知道的javascript-类型","date":"03 January, 2019","name":null},"fields":{"slug":"/type/"},"excerpt":"类型 内置类型 内置类型有哪些？如何校验？ 特殊类型有哪些？注意事项是？ 问题解释 内置类型为空值(null)，未定义(undefined)，布尔值(boolean)，数字(number)，字符串(string)，对象(object)，符号(symbol,ES…"}},{"node":{"id":"ae58de00-41e0-5c1f-9d50-d1727ecdd105","frontmatter":{"title":"FreeCodeCamp 高级算法题 - 字符串排列","date":"06 September, 2017","name":null},"fields":{"slug":"/advanced-no-repeats-please/"},"excerpt":"字符串排列 (No repeats please) 题目链接 中文链接 英文链接 问题解释 这个 function 接收一个字符串参数 str。返回值为参数 str 没有连续重复字符串的排列个数 如果 str 为 \"aab\"，则返回值应为 2，因为全排列后，会出现两个 \"aba…"}}]}}}