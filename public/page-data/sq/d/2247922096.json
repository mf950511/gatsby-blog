{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"0460095a-82dd-5fb6-9644-041b1e3229d8","frontmatter":{"title":"对象基本概念","date":"23 October, 2020","name":"francis"},"fields":{"slug":"/Object2/"},"excerpt":"对象基本概念 ECMA-262定义的对象是一组属性的无序集合。就是说对象是一组没有顺序的值 可以将对象想象为散列表，内容就是一组名/值对 对象实例通常都有属性跟方法 属性类型 ECMA-262使用内部特性来描述属性的特质。这些特性都由javascript…"}},{"node":{"id":"ce0ca55f-7e26-5db6-8f31-7d3886be48ab","frontmatter":{"title":"再读生成器","date":"22 October, 2020","name":"francis"},"fields":{"slug":"/generator2/"},"excerpt":"生成器 生成器是ECMAScript…"}},{"node":{"id":"19501fb1-e2d1-5023-bd03-20dcfa5bfa4e","frontmatter":{"title":"再读迭代器","date":"22 October, 2020","name":"francis"},"fields":{"slug":"/iterator2/"},"excerpt":"迭代器 迭代器模式描述了一个方案，将某些结构称为“可迭代对象”，因为它们都实现了正式的Iterable接口，而且可以通过迭代器Iterator消费 可迭代对象：数组或集合这样的集合类型的对象。特点：包含元素有限，具有无歧义的遍历顺序 任何实现Iterable…"}},{"node":{"id":"58fc3bd9-74bf-53b1-822f-b60569907948","frontmatter":{"title":"Set与WeakSet","date":"16 October, 2020","name":"francis"},"fields":{"slug":"/Set/"},"excerpt":"Set与WeakSet Set Set是ES6新增的集合类型，带来了集合数据结构 创建方式为 new 关键字加 Set 构造函数 可以通过在构造函数内传入可迭代对象来初始化该实例，如下 add()方法可以给Set添加新的键值对，has可以判断该Set是否有对应的值 size…"}},{"node":{"id":"6fcf34d7-694e-52d2-a9c5-76de4ec524e2","frontmatter":{"title":"Map与WeakMap","date":"16 October, 2020","name":"francis"},"fields":{"slug":"/Map/"},"excerpt":"Map与WeakMap Map Map是ES6新增的键值存储类型 创建方式为 new 关键字加 Map构造函数 可以通过在构造函数内传入可迭代对象来初始化该实例，可迭代对象的每一项需要包含键/值对数组，如下 set()方法可以给Map添加新的键值对，get…"}},{"node":{"id":"174ff913-84ec-5db1-a98f-a78ef01eb489","frontmatter":{"title":"初识webGl（1）","date":"16 October, 2020","name":"francis"},"fields":{"slug":"/webgl_shader_buffer/"},"excerpt":"初识webGl webGl是在web端实现3d效果的Api，是OpenGl的裁剪版，适用于web端的3d效果实现 webGl在浏览器端的支持情况不一致，所以我们使用时注意兼容此种情况 着色器 在使用webGl…"}},{"node":{"id":"f058dd7b-dbe7-5851-98d6-2977d51d178f","frontmatter":{"title":"定型数组","date":"15 October, 2020","name":"francis"},"fields":{"slug":"/ArrayBuffer/"},"excerpt":"定型数组 WebGL的出现导致了定型数组的出现，WebGL的API不需要javascript默认的双精度浮点格式的数值，但是这种数值恰好是javascript数组在内存中的格式。 因此每次WebGL与javascript运行时传递数组WebGL…"}},{"node":{"id":"f65b0b06-93cf-5afd-b6e9-c7c5abf4217f","frontmatter":{"title":"Array对象","date":"14 October, 2020","name":"francis"},"fields":{"slug":"/ObjectArray/"},"excerpt":"Array对象 Array的创建 Array构建函数创建 无参数创建会生成一个空的数组 当传入一个数值时，会生成一个数组，并且长度设为该数值 当传入一个非数值时，会生成一个数组，并且数组第一项位该值 如果传入多个值时，会生成一个数组，并且这几个值都会依次存在于数组中 Array…"}},{"node":{"id":"a50d0e8b-e12b-51f8-9f34-30d80f332020","frontmatter":{"title":"Global对象","date":"13 October, 2020","name":"francis"},"fields":{"slug":"/Global/"},"excerpt":"Global对象及方法 encodeURI、encodeURIComponent 这两个方法都是用于编码统一资源标识符（URI），以传给浏览器 区别是encodeURI不会编码属于URL组件的特殊字符，如冒号、斜杠、问号、井号，而encodeURIComponent…"}},{"node":{"id":"9d441122-2f49-553a-9a6e-3c0e78bc7f35","frontmatter":{"title":"Date类型","date":"12 October, 2020","name":"francis"},"fields":{"slug":"/Date/"},"excerpt":"Date 类型 Date构造函数可以接收毫秒数来创建时间对象，对此提供了辅助函数来进行毫秒数的获取 Date.parse() 该方法接收一个表示日期的字符串，并转为对应的毫秒数，接受的格式如下 \"月/日/年\"，如\"5/23/2019\" \"月名日,年\"，如\"May 23, 201…"}},{"node":{"id":"8036470e-8d0d-5c6b-a09c-e37477ad9fac","frontmatter":{"title":"Number类型","date":"12 October, 2020","name":"francis"},"fields":{"slug":"/Number/"},"excerpt":"Number 类型 Number对象也重写了toString、toLocalString、valueOf方法 valueOf返回原数值 toString()接收一个参数用于表示该数字的几进制数，如下 toExponential…"}},{"node":{"id":"45a21180-1f73-5f73-a5ec-fc9669dd6b2a","frontmatter":{"title":"String类型","date":"12 October, 2020","name":"francis"},"fields":{"slug":"/String/"},"excerpt":"String类型 字符串由16位码元组成，多数字符都是16位码元对应一个字符，length属性就是表示有多少个16位码元 charAt()方法返回给定索引位置的字符，参数为索引位置 javascript采用UCS-2和UTF-16两种Unicode编码混合策略，对于(U+000…"}},{"node":{"id":"652a5393-6eb5-530c-ac4e-5807ffa4811a","frontmatter":{"title":"javascript中的垃圾回收","date":"23 September, 2020","name":"francis"},"fields":{"slug":"/collect-garbage/"},"excerpt":"javascript…"}},{"node":{"id":"68165fe9-d8f1-5c50-8fbb-68de9f8fe6b2","frontmatter":{"title":"script不为人知的标签属性","date":"23 September, 2020","name":"francis"},"fields":{"slug":"/script-element/"},"excerpt":"script不为人知的标签属性 普通引用 js加载与执行都会阻塞页面渲染与执行，等到js加载并执行完成后才会继续页面的渲染 async js加载不会阻塞页面渲染，js加载后就会立即执行，执行时会阻塞页面渲染，有多个async…"}},{"node":{"id":"01c3a6f0-b9f3-5dc1-83e9-6b6b33d0f2f7","frontmatter":{"title":"常用循环语句的基本属性","date":"23 September, 2020","name":"francis"},"fields":{"slug":"/loop-statement/"},"excerpt":"循环语句 for-in 循环语句 for-in是严格迭代语句，会迭代一个对象中非Symbol的其他属性值，语法如下 for-in迭代对象是无序的，各浏览器下返回的顺序可能不一致 const并不是必须的，但建议使用，避免影响外界变量 迭代null或undefined…"}},{"node":{"id":"80c80092-2eb0-50ff-9111-ada9837fa767","frontmatter":{"title":"常用计算符独特的计算属性","date":"23 September, 2020","name":"francis"},"fields":{"slug":"/multiplicative-operators/"},"excerpt":"乘、除、取余、指数、加法、减法、比较、相等操作符 乘 乘法的计算遵循下面的原则 如果结果超出ECMAScript所表示的范围，那么最终会得到 Infinity 或者 -Infinity NaN参与运算，得到NaN Infinity 与 0 相乘得 NaN  Infinity…"}},{"node":{"id":"3b44d9df-e945-5f52-bda9-48cb83627910","frontmatter":{"title":"字符串模板标记函数","date":"23 September, 2020","name":"francis"},"fields":{"slug":"/template-tag-function/"},"excerpt":"字符串模板标记函数 字符串模板 ES6新增的字符串定义方式，可以通过  配合${} 来进行变量的嵌入，如下示例 模板标记函数 模板标记函数的定义跟普通函数一致，但是在使用它之前要准备一个字符串模板，调用方式也跟常规的函数调用方法不同，不需要使用 functionName…"}},{"node":{"id":"ffd055e6-a6df-55e4-b58a-cde3bd908441","frontmatter":{"title":"符号类型(symbol)","date":"23 September, 2020","name":"francis"},"fields":{"slug":"/symbol/"},"excerpt":"符号类型(symbol) Symbol是ES6新增的一种数据类型，用以标识独一无二的类型，所有的Symbol实例都是独一无二的 Symbol的使用方式 Symbol跟其他类不同，生成实例不需要使用 new 关键字，使用 new 关键字会报错，可以接受一个字符串作为Symbol…"}},{"node":{"id":"defa8509-6671-50d9-b075-e9df2e2cd9f3","frontmatter":{"title":"Well-Known Symbols","date":"23 September, 2020","name":"francis"},"fields":{"slug":"/well-known-symbol/"},"excerpt":"Well-Known Symbols well-known symbols 是es6引入的在整个javascript中使用的一系列方法，用于直接访问、重写、模拟语言内部的一系列行为。这些方法或者说符号以字符串属性存在于Symbol…"}},{"node":{"id":"47d99568-02b9-5409-bd41-7d2ca3d8aa46","frontmatter":{"title":"从零搭建一个react-hooks项目（五）","date":"18 September, 2020","name":"francis"},"fields":{"slug":"/react_md_5/"},"excerpt":"从零搭建一个react-hooks项目（五） 项目完成大概建起来了，但是当我打个生产包的时候都快哭了，一开始使用的devtool: \"source-map\"，用时高达 34 s，这当然是不可容忍的 然后我们先将devtool改为\"none\"，然后发现变为了29s…"}},{"node":{"id":"6fd01a22-d5a9-5590-b2d1-73fff7486888","frontmatter":{"title":"遗忘的对象基本属性","date":"17 September, 2020","name":"francis"},"fields":{"slug":"/object-type/"},"excerpt":"对象类型与基本方法 对象的创建我们可以采用 new 关键字加对象类型的名称来进行创建，比如创建一个基本对象，就是 需要注意的是，后面的括号并不是必须的，当我们创建对象不需要传参则不需要后面的括号也不会报错，但是不推荐，如下 Object…"}},{"node":{"id":"b301a082-2a39-58ae-aeca-bb9927f1256f","frontmatter":{"title":"不常用的一元操作符","date":"17 September, 2020","name":"francis"},"fields":{"slug":"/unary-operators/"},"excerpt":"不常用的一元操作符 位操作符 ECMAScript中数值都是已64位格式存储，但是位操作符不能直接在64位中操作，要把值转为32位整数，操作完成后再转为64位整数。 对开发者来说，是不用关注64位整数的，我们感知不到，我们只需要知道3…"}},{"node":{"id":"10bf3d13-e4ff-560f-957c-e46948b6ab86","frontmatter":{"title":"react hooks下封装通用redux","date":"14 July, 2020","name":"francis"},"fields":{"slug":"/react_hooks/"},"excerpt":"react hooks下封装通用redux redux我们常用来做全局状态管理，一般我们都会按功能模块来新建相关的action，reducer然后再使用combineReducers…"}},{"node":{"id":"27a437dd-790d-5c21-9a1b-770e2bab34d9","frontmatter":{"title":"从零搭建一个react-hooks项目（四）","date":"24 June, 2020","name":"francis"},"fields":{"slug":"/react_md_4/"},"excerpt":"从零搭建一个react-hooks项目（四） 前面我们搭建了基于react与typescript的开发环境，接下来就是我们项目开发中遇到的一些问题处理了 图片引入申明报错问题处理 之前我们配置了图片引入并且在页面中进行了图片引入，当我们把页面变为ts…"}},{"node":{"id":"d9ecc39e-d066-523f-88bb-62f4f055536c","frontmatter":{"title":"从零搭建一个react-hooks项目（三）","date":"23 June, 2020","name":"francis"},"fields":{"slug":"/react_md_3/"},"excerpt":"从零搭建一个react-hooks项目（三） 上一篇我们配置了项目相关，包括代码压缩混淆，开发生产配置抽离，图片与文字的引入使用等 接下来我们就配置一下react-router，react-redux与typescript 配置之前我们先补充一下webpack…"}},{"node":{"id":"7661f399-ad6d-5960-bc28-1894afcf1db3","frontmatter":{"title":"从零搭建一个react-hooks项目（二）","date":"12 June, 2020","name":"francis"},"fields":{"slug":"/react_md_2/"},"excerpt":"从零搭建一个react-hooks项目（二） 上一篇搭建了基本的webpack项目，可以支持react，less的基本使用，但是没有考虑到项目中的实际情况，例如生产环境的代码混淆，代码压缩，开发环境的热启动等。 下面我们就针对开发与生产环境的不同需求，对webpack…"}},{"node":{"id":"1e5e6612-8e10-5280-8cf6-aa67cc21fe69","frontmatter":{"title":"react hooks下使用react-redux","date":"11 June, 2020","name":"francis"},"fields":{"slug":"/redux-hooks/"},"excerpt":"react hooks 下使用redux redux redux是近年来javascript中火热的状态管理容器，提供可预测的全局状态管理。在大型的应用中我们常采用redux来进行状态管理，redux的基本使用方式如下 使用redux，我们先要进行action的编写，action…"}},{"node":{"id":"a2b00b27-2883-5073-9ded-36ed713d86b5","frontmatter":{"title":"从零搭建一个react-hooks项目（一）","date":"11 June, 2020","name":"francis"},"fields":{"slug":"/react_md_1/"},"excerpt":"从零搭建一个react-hooks项目（一） 最近有打算仿vue-admin项目构造一个react的项目，不引用官方脚手架，从webpack开始配置一套基于react,redux,typescript的项目，并实时记录一下项目中的一些配置情况 首先搭建一个基本的webpack…"}},{"node":{"id":"987e3bfc-e324-5d24-b3e6-50e0efa5659b","frontmatter":{"title":"JavaScript中实现数据结构队列","date":"02 January, 2020","name":"francis"},"fields":{"slug":"/quene/"},"excerpt":"队列 队列也是我们编程当中经常用到的一个数据结构，具有先入先出的特性，跟平时我们的排队一样，先进来先走 同样，JavaScript…"}},{"node":{"id":"b774f0ec-86ae-51d6-be83-4eb63bdba932","frontmatter":{"title":"JavaScript中实现数据结构栈","date":"25 December, 2019","name":"francis"},"fields":{"slug":"/stack/"},"excerpt":"栈 栈是我们经常听到的数据结构，拥有后入先出的特性，可以理解为存放箱子的过程，存的时候后来的都放到先来的上面，取得时候也是从上面往下取，因为上面都是后来的箱子，所以会被先取出来 JavaScript…"}},{"node":{"id":"7fcba351-eefd-5c24-895f-cc06059bbc39","frontmatter":{"title":"事件绑定的两种优化方式","date":"01 November, 2019","name":"francis"},"fields":{"slug":"/lazy_event/"},"excerpt":"…"}},{"node":{"id":"10195f41-311b-5b2f-b8f7-031f23af5fca","frontmatter":{"title":"storage工具类的封装","date":"01 November, 2019","name":"francis"},"fields":{"slug":"/storage/"},"excerpt":"Storage工具类的封装 日常开发中我们都会涉及到前端数据的存储，对一些需要长期保存在客户端的数据，我们通常会采用浏览器提供的localStorage对象，简称Storage对象。 由于所有的页面处于同一个浏览器环境下，所以各个开发工程师所存储的Storage…"}},{"node":{"id":"1e3fb51b-a78e-5ecc-898a-0c72db60797c","frontmatter":{"title":"字符串模板的实现","date":"01 November, 2019","name":"francis"},"fields":{"slug":"/string_template/"},"excerpt":"字符串模板的实现 字符串模板是针对大批量、多频率操作dom的解决方案，比如我们要根据数据动态创建一个多嵌套的元素并将其插入到页面中，如果我们采用常规创建dom元素的方式进行插，代码量会极其庞大，下面就是常规方式实现的功能 上面的方式可以看到在大批量的创造dom…"}},{"node":{"id":"5260aff9-1462-50b5-a403-a5ae6ddc4f89","frontmatter":{"title":"迭代器在轮播图中的应用","date":"31 October, 2019","name":"francis"},"fields":{"slug":"/iterator_loop/"},"excerpt":"…"}},{"node":{"id":"b90fadb3-a9e6-5a3b-a13f-65f66cb05168","frontmatter":{"title":"jquery选择器的实现","date":"31 October, 2019","name":"francis"},"fields":{"slug":"/jQuery/"},"excerpt":"jQuery选择器的简单实现 jQuery是前几年前端开发中的老大哥了，而我们最喜欢的也是他提供的选择器跟链式调用的方法了，最近在看了原型与原型链之后也是有点简单的想法，想尝试着实现以下jquery的选择器 首先需要构建一个函数A可以接受一个id…"}},{"node":{"id":"c57ed423-bb25-5bdd-af39-b41eaea239df","frontmatter":{"title":"JavaScript中的设计模式——工厂模式","date":"16 October, 2019","name":"francis"},"fields":{"slug":"/factory_mode/"},"excerpt":"JavaScript…"}},{"node":{"id":"9c66a817-b4c3-57be-86e9-8b84827c0f2e","frontmatter":{"title":"JavaScript中的继承（二）","date":"15 October, 2019","name":"francis"},"fields":{"slug":"/extends_new_2/"},"excerpt":"js…"}},{"node":{"id":"ba9bcf08-a4ac-5ba8-9e78-df793bedee45","frontmatter":{"title":"JavaScript中的继承","date":"14 October, 2019","name":"francis"},"fields":{"slug":"/extends_new/"},"excerpt":"js中的继承（一） 之前也写过一篇关于js继承的一篇文章，不过是在刚开始了解继承的时候写的一篇，看了很多别人的博客，似懂非懂的情况下写了那篇，最近再看js设计模式的时候再次看到了它，也想比较详细的再写一篇 因为js中没有类，所以一般会以函数内部使用this…"}},{"node":{"id":"4f438f27-270c-5d95-ba27-a1bcdc4ddd69","frontmatter":{"title":"JavaScript中new的原理与手动实现一个new","date":"14 October, 2019","name":"francis"},"fields":{"slug":"/new/"},"excerpt":"new的原理与实现 在javascript中我们经常看到在实例化某个类的时候都会在构造函数前面加一个new调用函数来获取我们的实例，但却没有想过new这个操作符在这里面做了什么，是如何生成的实例，所以这段时间我也大概了解了下new…"}},{"node":{"id":"5c0967d0-828a-5f08-b585-15afa421c743","frontmatter":{"title":"JavaScript中的继承","date":"21 March, 2019","name":"Francis"},"fields":{"slug":"/extends/"},"excerpt":"继承的实现与原理 继承 继承是面向对象中的一个特性，与多态，封装称为面向对象的三个基本特征 使用继承可以使一个对象快速拥有另一个对象的属性与方法，并能够重新定义自己的方法 JavaScript中并没有真正的类，所以实现继承可以通过原型链或者通过改变this来实现伪造对象继承 ES…"}},{"node":{"id":"157b0706-cf21-55b9-a1d3-1c9532e2b16b","frontmatter":{"title":"JavaScript语言精粹-对象","date":"14 March, 2019","name":"Francis"},"fields":{"slug":"/goodJavaScript_object/"},"excerpt":"JavaScript中的对象 原型 每个对象都连接到一个原型对象，并且可以继承原型对象的属性 通过字面量创建的对象都会连接到Object.prototype，它是JavaScript中的标配对象 我们可以在创建对象的时候选择另一个对象作为它的原型 ES5中提供的Object…"}},{"node":{"id":"2f1004a2-59eb-58e6-9723-6b52f9765418","frontmatter":{"title":"ES2015迭代器","date":"12 March, 2019","name":"Francis"},"fields":{"slug":"/iterator/"},"excerpt":"一脸懵逼的迭代器 迭代器 迭代器：迭代器是一个结构化的模式，用于从一个源一次一个的方式获取数据 JavaScript开发中从来不缺乏它的出现，总有各种各样的方法来实现它 ES…"}},{"node":{"id":"8651f538-ba17-5f88-8f44-7fe8a87f5f09","frontmatter":{"title":"ES2016字符串模板","date":"11 March, 2019","name":"Francis"},"fields":{"slug":"/js_template/"},"excerpt":"深入字符串模板 字符串模板 ES5之前我们连接字符串与变量还需要使用js的+运算符进行连接 ES…"}},{"node":{"id":"8e447136-8742-5a4a-b41b-fc01cf68bdcc","frontmatter":{"title":"ES2015生成器","date":"28 February, 2019","name":"Francis"},"fields":{"slug":"/yield/"},"excerpt":"生成器详解 生成器 生成器是什么？为什么会需要生成器？ 生成器的由来 传统异步流程对程序员并不友好，设定回调函数的方式不符合大脑对任务步骤的规划 生成器就是实现看似同步的异步流程控制 生成器的奇特之处 打破完整运行 传统意义上，javascript…"}},{"node":{"id":"0c842a9b-8999-56f9-b6c3-d5cf6767aba7","frontmatter":{"title":"javascript回顾","date":"27 February, 2019","name":"francis"},"fields":{"slug":"/call-apply/"},"excerpt":"call,apply,bind详解 call,apply,bind的使用 call,apply,bind的作用是什么？用法是什么？ call,apply,bind之间有什么联系？区别是什么？ 问题详解 功能上，call，apply，bind都可以用来改变函数内部this…"}},{"node":{"id":"d52b4576-3b11-5df2-9492-7dd725a57c96","frontmatter":{"title":"HTTP与TCP/IP了解","date":"26 February, 2019","name":"francis"},"fields":{"slug":"/TCP-IP-ThreeHandShake/"},"excerpt":"TCP协议的3次握手与4次分手 TCP协议的连接与断开 什么是TCP协议的三次握手？为什么会有三次握手？ 什么是TCP协议的四次分手？为什么会有四次分手？ 问题解释 TCP的三次握手其实是在客户端与服务端建立一个TCP连接，在TCP/IP…"}},{"node":{"id":"98385bee-2c91-5358-a343-4a22123906b4","frontmatter":{"title":"你不知道的javascript-类型","date":"03 January, 2019","name":null},"fields":{"slug":"/type/"},"excerpt":"类型 内置类型 内置类型有哪些？如何校验？ 特殊类型有哪些？注意事项是？ 问题解释 内置类型为空值(null)，未定义(undefined)，布尔值(boolean)，数字(number)，字符串(string)，对象(object)，符号(symbol,ES…"}},{"node":{"id":"ae58de00-41e0-5c1f-9d50-d1727ecdd105","frontmatter":{"title":"FreeCodeCamp 高级算法题 - 字符串排列","date":"06 September, 2017","name":null},"fields":{"slug":"/advanced-no-repeats-please/"},"excerpt":"字符串排列 (No repeats please) 题目链接 中文链接 英文链接 问题解释 这个 function 接收一个字符串参数 str。返回值为参数 str 没有连续重复字符串的排列个数 如果 str 为 \"aab\"，则返回值应为 2，因为全排列后，会出现两个 \"aba…"}}]}}}