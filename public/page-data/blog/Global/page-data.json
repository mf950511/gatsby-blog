{"componentChunkName":"component---src-templates-blog-small-jsx","path":"/blog/Global/","result":{"data":{"markdownRemark":{"html":"<h1>Global对象及方法</h1>\n<h2>encodeURI、encodeURIComponent</h2>\n<ul>\n<li>这两个方法都是用于编码统一资源标识符（URI），以传给浏览器</li>\n<li>区别是encodeURI不会编码属于URL组件的特殊字符，如冒号、斜杠、问号、井号，而encodeURIComponent会编码所有的非标准字符</li>\n<li>所以一般我们会使用encodeURIComponent</li>\n<li>它们分别对应的解码方法时decodeURI与decodeURIComponent</li>\n</ul>\n<h2>eval</h2>\n<ul>\n<li>eval接收一个完整的要执行的ECMAScript字符串，当解释器发现eval()方法时会将其解释为真实的ECMAScript语句</li>\n<li>然后将其插入当前位置，插入的语句属于该调用的执行上下文，被执行语句与该上下文有同样的作用域链</li>\n</ul>\n<pre><code class=\"language-js\">let msg = 'hello'\neval(\"console.log(msg)\") // 'hello'\n</code></pre>\n<ul>\n<li>可以在eval中定义函数或变量，然后在外面引用</li>\n</ul>\n<pre><code class=\"language-js\">eval(\"function sayHi(){ console.log('hi')}\")\nsayHi() // hi\n\neval(\"let msg = 'world'\")\nconsole.log(msg) // msg is not defined\n</code></pre>\n<ul>\n<li>这是因为eval中的变量跟函数都无法被提升，只有到执行之后才会被创建，所以函数可以正常执行，但是变量在编译阶段就会报错</li>\n<li>在严格模式下使用eval会报错</li>\n</ul>\n<h2>Math对象</h2>\n<ul>\n<li>Math.E,自然对数的基数e的值</li>\n<li>Math.LN10，10为底的自然对数</li>\n<li>Math.LN2，2为底的自然对数</li>\n<li>Math.LOG2E，以2为底e的对数</li>\n<li>Math.LOG10E，以10为底e的对数</li>\n<li>Math.PI，数字π</li>\n<li>Math.SQRT1_2，1/2的平方根</li>\n<li>Math.SQRT2，2的平方根</li>\n</ul>\n<h3>min和max方法</h3>\n<ul>\n<li>min，确定一组数值的最小值</li>\n<li>max，确定一组数值的最大值</li>\n</ul>\n<pre><code class=\"language-js\">console.log(Math.min(3, 8, 4, 12, 66,44, 66, 77)) // 3\nconsole.log(Math.max(3, 8, 4, 12, 66,44, 66, 77)) // 77\n</code></pre>\n<ul>\n<li>由接受参数形式可以对数组解构来获取最大最小值</li>\n</ul>\n<pre><code class=\"language-js\">let arr = [3, 8, 4, 12, 66,44, 66, 77]\nconsole.log(Math.min(...arr)) // 3\nconsole.log(Math.max(...arr)) // 77\n</code></pre>\n<ul>\n<li>其他方法</li>\n<li>Math.abs()，返回绝对值</li>\n<li>Math.exp(x)，返回MATH.E的x次幂</li>\n<li>Math.expm1(x)，Math.exp(x) - 1</li>\n<li>Math.log(x)，返回x的自然对数</li>\n<li>Math.log1p(x)，等于1 + Math.log(x)</li>\n<li>Math.pow(x, power)，返回x的power次幂</li>\n<li>Math.hypot(...nums)，返回nums中每个数平方和的平方根</li>\n<li>Math.clz32(x)，返回32位整数x的前置0的数量</li>\n<li>Math.sign(x)，返回表示x符号的1，0，-0，-1</li>\n<li>Math.trunc(x)，返回x的整数部分，删除所有小数部分</li>\n<li>Math.sqrt(x)，返回x的平方根</li>\n<li>Math.cbrt(x)，返回x的立方根</li>\n<li>Math.acos(x)，返回x的反余弦</li>\n<li>Math.acosh(x)，返回x的反双曲余弦</li>\n<li>Math.asin(x)，返回x的反正弦</li>\n<li>Math.asinh(x)，返回x的双反曲正弦</li>\n<li>Math.atan(x)，返回x的反正切</li>\n<li>Math.atanh(x)，返回x的双反曲正切</li>\n<li>Math.atan2(y, x)，返回y/x的反正切</li>\n<li>Math.cos(x)，返回x的余弦</li>\n<li>Math.sin(x)，返回x的正弦</li>\n<li>Math.tan(x)，返回x的正切</li>\n</ul>","frontmatter":{"title":"Global对象","date":"2020-10-13","tags":["JavaScript回顾"],"categories":"JavaScript"},"fields":{"slug":"/Global/"}}},"pageContext":{"slug":"/Global/"}},"staticQueryHashes":["2566592090"]}