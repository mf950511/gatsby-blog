{"componentChunkName":"component---src-templates-blog-small-jsx","path":"/blog/symbol/","result":{"data":{"markdownRemark":{"html":"<h1>符号类型(symbol)</h1>\n<ul>\n<li>Symbol是ES6新增的一种数据类型，用以标识独一无二的类型，所有的Symbol实例都是独一无二的</li>\n</ul>\n<h2>Symbol的使用方式</h2>\n<ul>\n<li>Symbol跟其他类不同，生成实例不需要使用 new 关键字，使用 new 关键字会报错，可以接受一个字符串作为Symbol的入参，也可以不传参直接生成，如下</li>\n</ul>\n<pre><code class=\"language-js\">let sm = new Symbol() // TypeError: Symbol is not a constructor\n\nlet sm1 = Symbol()\nconsole.log(sm1) // Symbol()\nconsole.log(typeof sm1) // symbol\nlet sm2 = Symbol('test')\nconsole.log(sm2) // Symbol('test')\n</code></pre>\n<ul>\n<li>每一个Symbol实例都不相同，如下实验</li>\n</ul>\n<pre><code class=\"language-js\">let sm = Symbol()\nlet sm1 = Symbol()\nconsole.log(sm === sm1) // false\n\nlet sm2 = Symbol('test')\nlet sm3 = Symbol('test')\nconsole.log(sm2 === sm3) // false\n</code></pre>\n<ul>\n<li>这也是Symbol最显著的特殊，可以让我们无后顾之忧的拓展对象属性，而不用担心会跟其现有的属性或方法冲突</li>\n</ul>\n<h2>Symbol.for()</h2>\n<ul>\n<li>如果都是使用上面的Symbol()来给对象赋值的的话我们就没法读取到该属性值了，如下</li>\n</ul>\n<pre><code class=\"language-js\">let a = {}\na[Symbol('test')] = 123\nconsole.log(a[Symbol('test')]) // undefined\n</code></pre>\n<ul>\n<li>因为在这里我们赋值跟取值的Symbol是完全不同的，为了避免这种情况，且能获取到对应的值我们需要使用Symbol.for()</li>\n<li>Symbol.for()方法的使用跟Symbol()的使用是一致的，可以接收一个字符串来做Symbol的唯一表示，调用该方式时，会从全局运行注册对象中查找有没有该Symbol，如果没有找到，就会生成一个Symbol对象并注册到全局运行注册对象中，然后返回该对象，如果查到了该Symbol，则直接返回该对象，所以看下示例：</li>\n</ul>\n<pre><code class=\"language-js\">let a = Symbol.for('test') // 没找到，创建实例\nlet b = Symbol.for('test') // 找到，直接返回实例\nconsole.log(a === b) // true\n\nlet c = {}\nc[Symbol.for('foo')] = 123\nconsole.log(c[Symbol.for('foo')]) // 123\n</code></pre>\n<ul>\n<li>使用Symbol()给对象赋值的方式，如下</li>\n</ul>\n<pre><code class=\"language-js\">let s1 = Symbol('foo'),\n  s2 = Symbol('bar'),\n  s3 = Symbol('baz'),\n  s4 = Symbol('qux')\nlet o = {\n  [s1]: 'foo val'\n}\nconsole.log(o) // {Symbol(foo): \"foo val\"}\nObject.defineProperty(o, s2, { value: 'bar val' })\nconsole.log(o) // {Symbol(foo): \"foo val\", Symbol(bar): \"bar val\"}\nObject.defineProperties(o, {\n  [s3]: { value: 'baz val' },\n  [s4]: { value: 'qux val' }\n})\nconsole.log(o) // {Symbol(foo): \"foo val\", Symbol(bar): \"bar val\", Symbol(baz): \"baz val\", Symbol(qux): \"qux val\"}\n</code></pre>\n<h2>Symbol.keyFor()</h2>\n<ul>\n<li>我们可以使用 Symbol.keyFor() 来检查一个Symbol实例是否存在与全局运行注册表中，该方法接收一个Symbol实例，如果全局注册表中存在该实例，则返回对应的key值，如果不存在，就会返回一个undefined，如下</li>\n</ul>\n<pre><code class=\"language-js\">Symbol.keyFor(Symbol.for('test')) // 'test'，通过Symbol.for()创建的Symbol实例会自动在注册表中注册\nSymbol.keyFor(Symbol('test')) // undefined 通过Symbol()方式创建的不会在注册表中注册，所以会返回undefined\n</code></pre>\n<h2>Object.getOwnPropertyNames() 跟 Object.getOwnPropertySymbols()</h2>\n<ul>\n<li>然后我们尝试使用 Object.getOwnPropertyNames 跟 Object.getOwnPropertySymbols 来获取一下对象o的值来看一下</li>\n</ul>\n<pre><code class=\"language-js\">Object.getOwnPropertyNames(o) // []\nObject.getOwnPropertySymbols(o) // [Symbol(foo), Symbol(bar), Symbol(baz), Symbol(qux)]\n</code></pre>\n<ul>\n<li>这里我们能看到使用 Object.getOwnPropertyNames 好像并不能获取到我们Symbol实例键，我们再给o拓展几个普通属性试试</li>\n</ul>\n<pre><code class=\"language-js\">o['baz'] = '123'\no['foo'] = '234'\n\nObject.getOwnPropertyNames(o) // [\"baz\", \"foo\"]\nObject.getOwnPropertySymbols(o) // [Symbol(foo), Symbol(bar), Symbol(baz), Symbol(qux)]\n</code></pre>\n<ul>\n<li>看到上结果我们也能知道，Object.getOwnPropertyNames 用于获取我们的常规除Symbol外的常规键值，Object.getOwnPropertySymbols 用于获取我们的Symbol键值</li>\n</ul>\n<h2>Object.getOwnPropertyDescriptors() 跟 Reflect.ownKeys()</h2>\n<ul>\n<li>然后我们再使用 Object.getOwnPropertyDescriptors() 跟 Reflect.ownKeys()来获取一下o的属性</li>\n</ul>\n<pre><code class=\"language-js\">Object.getOwnPropertyDescriptors(o) // {baz: {…}, foo: {…}, Symbol(foo): {…}, Symbol(bar): {…}, Symbol(baz): {…},Symbol(qux): {...}}\nReflect.keys(o) // [\"baz\", \"foo\", Symbol(foo), Symbol(bar), Symbol(baz), Symbol(qux)]\n</code></pre>\n<ul>\n<li>从中我们能看到 Object.getOwnPropertyDescriptors() 可以获取对象的常规值跟Symbol对应的值，Reflec.ownKeys() 可以获取对象的常规键跟Symbol键</li>\n</ul>","frontmatter":{"title":"符号类型(symbol)","date":"2020-09-23","tags":["JavaScript回顾"],"categories":"JavaScript"},"fields":{"slug":"/symbol/"}}},"pageContext":{"slug":"/symbol/"}},"staticQueryHashes":["2566592090"]}