{"componentChunkName":"component---src-templates-blog-small-jsx","path":"/blog/well-known-symbol/","result":{"data":{"markdownRemark":{"html":"<h1>Well-Known Symbols</h1>\n<ul>\n<li>well-known symbols 是es6引入的在整个javascript中使用的一系列方法，用于直接访问、重写、模拟语言内部的一系列行为。这些方法或者说符号以字符串属性存在于Symbol的工厂函数上。</li>\n<li>这些符号存在的主要意义就是重新定义它们用于修改原生语言中的构造函数表现形式。例如，for of 循环其实是依靠于对象原型提供的 Symbol.iterator 属性，所以我们可以通过重新定义对象的 Symbol.iterator 属性来控制它的for of 表现。</li>\n<li>well-known symbols 这些符号就是Symbol对象上的一些字符串属性，定义良好的符号都具有不可写入、不可重复、不可配置的特性。</li>\n</ul>\n<h2>Symbol.asyncIterator</h2>\n<ul>\n<li>ECMAScript规范中，此符号用于描述一个对象返回默认异步迭代对象的方法属性。当对象具有该属性则该对象是异步可迭代的，可以被 for await of 表达式调用。</li>\n<li>语言构造器例如 for await of 利用该符号对应的方法来实现异步迭代。</li>\n<li>所以我们可以对一个自定义对象添加该符号方法实现其可被for await of 调用</li>\n<li>for await of 的调用必须在async 函数下才可以</li>\n</ul>\n<pre><code class=\"language-js\">var a = { a :1, b: 2 }\nasync function b(){\n  for await(var value of a) {\n    console.log(a)\n  }\n}\nb() // TypeError: a is not async iterable\n\nvar a = {\n  a :1,\n  b: 2,\n  *[Symbol.asyncIterator](){\n  }\n}\nasync function b(){\n  for await(var value of a) {\n    console.log(a)\n  }\n}\nb() // Promise {&#x3C;resolved>: undefined}\n</code></pre>\n<ul>\n<li>可以看出只要我们实现了符号对应的异步方法，就可以正常调用，下面我们可以自定义我们想要的表现形式</li>\n</ul>\n<pre><code class=\"language-js\">class Emitter {\n  constructor(max) {\n    this.max = max\n    this.asyncIdx = 0\n  }\n  async*[Symbol.asyncIterator] () {\n    while(this.asyncIdx &#x3C; this.max) {\n      if(this.asyncIdx % 2 === 0) {\n        yield new Promise(resolve => resolve(this.asyncIdx++))\n      } else {\n        yield new Promise(resolve => {\n          setTimeout(() => {\n            resolve(this.asyncIdx++)\n          }, 1000)\n        })\n      }\n    }\n  }\n}\nvar a = new Emitter(6)\nasync function b(){\n  for await(let value of a) {\n    console.log(value)\n  }\n}\nb() // 0 1 2 3 4 5 \n</code></pre>\n<h2>Symbol.hasInstance</h2>\n<ul>\n<li>在ECMAScript标准中，该符号用做决定对象是否为构造器的实例。也就是“一个方法用来决定构造函数是否识别一个对象为它的实例。在语法上由instanceof方法调用”。instanceof操作符提供了一个方法判断一个对象实例在其原型链中是否有该原型。</li>\n<li>instanceof使用如下</li>\n</ul>\n<pre><code class=\"language-js\">function Foo(){}\nlet f = new Foo()\n\nconsole.log(f instanceof Foo) // true\n</code></pre>\n<ul>\n<li>在ES6中，instanceof 操作使用 SYmbol.hasInstance 来衡量这个关系。该键对应一个函数具有跟instanceof相同的表现，但是操作方式相反，如下</li>\n</ul>\n<pre><code class=\"language-js\">function Foo(){}\nlet f = new Foo()\nconsole.log(Foo[Symbol.hasInstance](f)) // true\n</code></pre>\n<ul>\n<li>该属性被定义到了函数原型上面，所以所有的函数跟类都自动具有了该方法，因为instanceof操作符会在原型链上查找这个属性值，所以我们可以在一个继承类上来重新定义该属性。</li>\n</ul>\n<pre><code class=\"language-js\">class Bar{}\nclass Baz extends Bar{\n  static [Symbol.hasInstance] (){\n    return false\n  }\n}\n\nlet b = new Baz()\nconsole.log(Bar[Symbol.hasInstance](b)) // true\nconsole.log(b instanceof Bar) // true\nconsole.log(Baz[Symbol.hasInstance](b)) // false\nconsole.log(b instanceof Baz) // false\n</code></pre>\n<ul>\n<li>我们能看到，当我们查找是否是Bar的实例时，因为我们的构造函数就是继承自Bar，并且没有修改Bar的相关属性，所以能正常返回true。但是当我们修改了Baz的构造函数之后，再次调用Baz返回的就是我们修改后的函数值了</li>\n</ul>\n<h2>Symbol.isConcatSpreadable</h2>\n<ul>\n<li>在ECMAScript标准中，此符号用来决定一个对象在被Array.prototype.concat()方法调用的时候是否要被扁平化。Array.prototype.concat()方法在ES6中将会基于传入的类数组对象来决定如何将其与数组实例拼接。符号Symbol.isConcatSpreadable将允许你重写这个方法。</li>\n<li>数组对象在默认情况下将会被扁平化处理到当前数组中，当对应实例的Symbol.isConcatSpreadable属性为false或者falsy数据时，则数组对象会被整个塞到当前数组中。如下</li>\n</ul>\n<pre><code class=\"language-js\">let initial = ['foo']\nlet array = ['baz']\nconsole.log(initial.concat(array)) // [\"foo\", \"baz\"]\n\nlet initial = ['foo']\nlet array = ['baz']\narray[Symbol.isConcatSpreadable] = false\nconsole.log(initial.concat(array)) // [\"foo\", Array(1)]\n</code></pre>\n<ul>\n<li>类数组对象在默认情况下会被整个塞到当前数组中，类似于append表现，当我们修改其Symbol.isConcatSpreadable属性为true或者truthy时，这个对象将会被扁平化处理，然后拼接到数组中。</li>\n<li>类数组对象有两个特征，一个是length属性值为数值，一个是有数字键值，看以下表现</li>\n</ul>\n<pre><code class=\"language-js\">// 默认值\nlet arrayLikeObject = { length: 1, 0: 'baz'}\nlet initial = ['foo']\nconsole.log(initial.concat(arrayLikeObject)) // [\"foo\", {…}]\n\n// 修改后\nlet arrayLikeObject = { length: 1, 0: 'baz'}\nlet initial = ['foo']\narrayLikeObject[Symbol.isConcatSpreadable] = true\nconsole.log(initial.concat(arrayLikeObject)) // [\"foo\", \"baz\"]\n</code></pre>\n<ul>\n<li>其他的非数组或者类数组对象在设置了Symbol.isConcatSpreadable为true时都会被忽略，并不会被添加进去</li>\n</ul>\n<pre><code class=\"language-js\">let otherObject = new Set().add('qux')\nlet initial = ['foo']\nconsole.log(initial.concat(otherObject)) // [\"foo\", Set(1)]\n\nlet otherObject = new Set().add('qux')\nlet initial = ['foo']\notherObject[Symbol.isConcatSpreadable] = true\nconsole.log(initial.concat(otherObject)) // [\"foo\"]\n</code></pre>\n<h2>Symbol.iterator</h2>\n<ul>\n<li>在ECMAScript标准中，该符号用于描述一个对象返回默认迭代器对象的方法属性。当对象具有该属性则该对象是可迭代的，可以被for of 循环调用。</li>\n<li>for of 语句就是利用此符号来执行迭代，该语句将会调用Symbol.iterator对应的函数，并期望它返回一个实现了迭代器的对象，在很多场景下会返回一个生成器(一个实现了Iterator api的对象。)</li>\n</ul>\n<pre><code class=\"language-js\">class Foo{\n  *[Symbol.iterator](){}\n}\nlet f = new Foo()\nconsole.log(f[Symbol.iterator]()) // Generator {&#x3C;suspended>}\n</code></pre>\n<ul>\n<li>需要注意的是，通过Symbol.iterator生产的对象需要能够连续生产对象凭借 next() 方法。这可以通过显示声明next方法或者通过生成器函数生成。</li>\n</ul>\n<pre><code class=\"language-js\">// 显式定义next\nclass Emitter{\n  constructor(max){\n    this.max = max\n    this.idx = 0\n  }\n  [Symbol.iterator](){\n    return {\n      next:() => {\n        if(this.idx &#x3C; this.max) {\n          return { value: this.idx++, done: false}\n        } else {\n          return { done: true }\n        }\n      }\n    }\n  }\n}\nfunction count(){\n  let emitter = new Emitter(6)\n  for(let x of emitter) {\n    console.log(x)\n  }\n}\ncount() // 0 1 2 3 4 5\n\n// 生成器函数生成\nclass Emitter{\n  constructor(max){\n    this.max = max\n    this.idx = 0\n  }\n  *[Symbol.iterator](){\n    while(this.idx &#x3C; this.max) {\n      yield this.idx++\n    }\n  }\n}\n\nfunction count(){\n  let emitter = new Emitter(5)\n  for(const x of emitter) {\n    console.log(x)\n  }\n}\n\ncount()  // 0 1 2 3 4\n</code></pre>\n<h2>Symbol.match</h2>\n<ul>\n<li>ECMAScript标准中，此符号是用于描述一个字符串与正则表达式的匹配关系的方法属性。被String.prototype.match()方法调用，String.prototype.match()方法会调用Symbol.match对应的函数去计算表达式，因为正则表达式的原型上有该方法属性，所以所有的正则表达式都可以被String.prototype.mactch()方法调用。</li>\n<li>如果提供其他的非正则表达式参数给String.prototype.match()将会把参数转为正则表达式。</li>\n<li>如果要避免此行为并且想要将参数直接使用，我们可以通过为参数指定 Symbol.match 属性为函数来绕过这个限制，该函数只接受一个参数，参数为调用match方法的字符串实例，返回值为任意类型。</li>\n</ul>\n<pre><code class=\"language-js\">// 正常情况\nvar a = {}\n'123123'.match(a) // null\n\n// 添加值\nvar a = {}\nObject.prototype[Symbol.match] = string => string.includes('123')\n'123123'.match(a) // true\n</code></pre>\n<ul>\n<li>上面我们就是为对象指定了Symbol.match属性，所以但我们传递进去对象值时都会返回true</li>\n</ul>\n<h2>Symbol.replace</h2>\n<ul>\n<li>ECMAScript标准中，此符号是用于描述“替换字符串中匹配到的子字符串的一个正则表达式方法，被String.prototype.replace()方法调用”</li>\n<li>String.prototype.replace将会调用参数上的Symbol.replace对应的方法来进行表达式计算</li>\n<li>正则表达式原型有Symbol.replace方法，所以所有的正则表达式都可以被replace方法调用。</li>\n<li>同样的，如果传入的是非正则类型，则会被强制转为正则类型。我们可以通过为入参定义Symbol.replace方法来绕过并重新定义行为</li>\n<li>定义的方法有两个参数，一个是原始字符串，一个是要替换的字符串</li>\n</ul>\n<pre><code class=\"language-js\">// 原表现形式\nclass Test{\n  constructor(str){\n    this.str = str\n  }\n}\n\"aaasdasddd\".replace(new Test('asd'), '123') // 'aaasdasddd'\n\n// 重新定义属性\nclass Test{\n  constructor(str){\n    this.str = str\n  }\n  [Symbol.replace] = (str, replaceStr) => str.split(this.str).join(replaceStr)\n}\n\"aaasdasddd\".replace(new Test('asd'), '123') // 'aa123123dd'\n</code></pre>\n<ul>\n<li>上面我们就实现了传递一个非正则对象给replace方法并成功完成我们想要的展示形式</li>\n</ul>\n<h2>Symbol.search</h2>\n<ul>\n<li>在ECMAScript规范中，该符号用来描述“一个用来返回字符串中符合对应正则表达式的字符串的位置，被String.prototype.search()方法调用”</li>\n<li>String.prototype.search将会调用参数上的Symbol.search对应的方法来进行表达式计算</li>\n<li>正则表达式原型有Symbol.search方法属性，所以所有的正则表达式都可以被search方法调用。</li>\n<li>同样的，如果传入的是非正则类型，则会被强制转为正则类型。我们可以通过为入参定义Symbol.search方法来绕过并重新定义行为</li>\n<li>定义的方法只有一个参数，就是对应的字符串实例，返回值为任意类型</li>\n</ul>\n<pre><code class=\"language-js\">// 原表现形式\nclass Search{\n  constructor(str){\n    this.str = str\n  }\n}\n\"hahaha\".search(new Search('ha')) // -1\n\n// 重新定义属性\nclass Search{\n  constructor(str){\n    this.str = str\n  }\n  [Symbol.replace] = (str) => str.indexOf(this.str)\n}\n\"hahaha\".replace(new Search('ha')) // 0\n</code></pre>\n<h2>Symbol.species</h2>\n<ul>\n<li>该符号被构建函数调用创造派生实例</li>\n<li>在构造类中声明静态getter方法Symbol.species将会覆盖新创建实例原型的构建函数</li>\n<li>当我们调用map方法或者concat方法时会默认返回对应实例的默认构造函数，如果我们这里通过声明getter方法Symbol.species来将其修改为其他构建对象，那在map或concat方法后返回的对象类型就会发生变化</li>\n</ul>\n<pre><code class=\"language-js\">class Bar extends Array {}\nvar b = new Bar(1, 2, 3)\nconsole.log(b instanceof Array) // true\nconsole.log(b instanceof Bar) // true\n\n// 添加getter方法\nclass Baz extends Array {\n  static get [Symbol.species] () {\n    return Number\n  }\n}\nvar c = new Baz(1, 2, 3)\nconsole.log(c instanceof Array)   // true\nconsole.log(c instanceof Baz)     // true\nconsole.log(c instanceof Number)  // false\n\nconsole.log(c.concat(c) instanceof Array)   // false\nconsole.log(c.concat(c) instanceof Baz)     // false\nconsole.log(c.concat(c) instanceof Number)  // true\n</code></pre>\n<ul>\n<li>从上面我们可以看出，声明getter方法Symbol.species后，对单独的实例不会有影响，但是当返回默认的构造函数时，就会使用我们Symbol.species中返回的构造函数了</li>\n</ul>\n<h2>Symbol.split</h2>\n<ul>\n<li>该符号用于描述“一个用于在匹配正则表达式的位置进行字符串分割的正则表达式方法，被String.prototype.split()方法调用”</li>\n<li>String.prototype.split将会调用入参对象的Symbol.split属性方法来进行表达式计算。</li>\n<li>正则表达式原型有Symbol.split方法属性，所以所有的正则表达式都可以被split方法调用。</li>\n<li>同样的，如果传入的是非正则类型，则会被强制转为正则类型。我们可以通过为入参定义Symbol.split方法来绕过并重新定义行为</li>\n<li>定义的方法只有一个参数，就是对应的字符串实例，返回值为任意类型</li>\n</ul>\n<pre><code class=\"language-js\">// 原表现形式\nclass Split{\n  constructor(str){\n    this.str = str\n  }\n}\n\"123hahaha123\".split(new Split('ha')) // [\"123hahaha123\"]\n\n// 重新定义属性\nclass Split{\n  constructor(str){\n    this.str = str\n  }\n  [Symbol.split](target){\n    console.log(123, target, this.str)\n    return target.split(this.str)\n  }\n}\n\"123hahaha123\".split(new Split('ha')) // [\"123\", \"\", \"\", \"123\"]\n</code></pre>\n<h2>Symbol.toPrimitive</h2>\n<ul>\n<li>该符号用于描述“一个将对象转换为常规数据类型的方法，被强制类型操作符所调用”。很多内置操作符都会尝试将对象转为基本数据类型，例如：string类型、number类型、number类型，或者其他的基本类型。</li>\n<li>对一个自定义的对象，我们可以通过定义它的Symbol.toPrimitive属性来决定它的强制类型转换方式。该方法接收一个它原本会被转换为的数据类型的类型字符串名称，所以我们根据这个情况构造我们想要的形式</li>\n</ul>\n<pre><code class=\"language-js\">// 原始类型\nclass Foo{}\nlet foo = new Foo()\nconsole.log(3 + foo) // \"3[object Object]\"\nconsole.log(3 - foo)  // NaN\nconsole.log(String(foo))  // \"[object Object]\"\n\n// 自定义表现形式\nclass Bar {\n  constructor(){\n    this[Symbol.toPrimitive] = function (hint){\n      switch(hint) {\n        case 'string':\n          return 'string bar'\n        case 'number':\n          return 3\n        case 'default':\n        default:\n          return 'default bar'\n      }\n    }\n  }\n}\nlet bar = new Bar()\nconsole.log(3 + bar) // 3default bar\nconsole.log(3 - bar)  // 0\nconsole.log(String(bar))  // string bar\n</code></pre>\n<ul>\n<li>上面我们可以看到，当对象遇到 + 操作符时它无法确定要执行字符串拼接的 + 操作还是数值的相加 + 操作，所以就返回了默认的 default bar;当对象遇到 - 操作时明确的知道自己要被转为数值类型，所以走了 case 'number' ，返回了3，然后被执行操作；当预定String()方法时也明确的知道自己要返回字符串类型，所以返回了 string bar</li>\n</ul>\n<h2>Symbol.toStringTag</h2>\n<ul>\n<li>该符号用于描述“一个对象的创建对象类型的默认字符串描述，被Object.prototype.toString所调用”，该创建对象的字符串描述会依靠Symbol.toStringTag方法来获取，默认为\"Object\"</li>\n<li>内置类型都有声明这个属性方法，但是自定义对象就需要我们显式声明了</li>\n</ul>\n<pre><code class=\"language-js\">// 内置对象\nvar s = new Set()\nconsole.log(s)                      // Set(0) {}\nconsole.log(s.toString())           // [object Set]\nconsole.log(s[Symbol.toStringTag])  // Set\n// 自定义对象\nclass Foo{}\nvar f = new Foo()\nconsole.log(f)                      // Foo {}\nconsole.log(f.toString())           // [object Object]\nconsole.log(f[Symbol.toStringTag])  // undefined\n\n// 修改后的自定义对象\nclass Bar{\n  constructor(){\n    this[Symbol.toStringTag] = 'Bar'\n  }\n}\nvar b = new Bar()\nconsole.log(b)                      // Bar {Symbol(Symbol.toStringTag): \"Bar\"}\nconsole.log(b.toString())           // [object Bar]\nconsole.log(b[Symbol.toStringTag])  // Bar\n</code></pre>\n<h2>Symbol.unscopables</h2>\n<ul>\n<li>该符号用于描述“防止被width操作绑定到该对象的自有属性或者继承属性”，设置这个属性将指定键值改为true则with方法将无法在该对象上查找指定属性</li>\n</ul>\n<pre><code class=\"language-js\">// 正常形式\nvar o = { foo: 'asd' }\nwith(o) {\n  console.log(foo) // 'asd'\n}\n\n// 自定义后\nvar o = { foo: 'asd' }\no[Symbol.unscopables] = {\n  foo: true\n}\nwith(o) {\n  console.log(foo)  // Uncaught ReferenceError: foo is not defined\n}\n</code></pre>\n<ul>\n<li>新的ECMAScript规范中已经不推荐使用with方法了，所以，我们的Symbol.unscopables也不再推荐使用</li>\n</ul>","frontmatter":{"title":"Well-Known Symbols","date":"2020-09-23","tags":["JavaScript回顾"],"categories":"JavaScript"},"fields":{"slug":"/well-known-symbol/"}}},"pageContext":{"slug":"/well-known-symbol/"}},"staticQueryHashes":["2566592090"]}