{"componentChunkName":"component---src-templates-blog-small-jsx","path":"/blog/storage/","result":{"data":{"markdownRemark":{"html":"<h1>Storage工具类的封装</h1>\n<ul>\n<li>日常开发中我们都会涉及到前端数据的存储，对一些需要长期保存在客户端的数据，我们通常会采用浏览器提供的localStorage对象，简称Storage对象。</li>\n<li>由于所有的页面处于同一个浏览器环境下，所以各个开发工程师所存储的Storage数据可能会出现同名情况，这样就会相互覆盖相互影响，所以为了解决这一问题，我们需要每个开发者都对自己的存储数据进行前缀命名好避免数据的污染</li>\n<li>Storage的存储api提供的比较简单，所以要实现这个功能就要我们进行进一步的封装与拓展，以实现我们的需求，首先我们构建一个Storage类，接收一个开发者id与数据分隔符（用于区分内容值与内容有效时间），并初始化状态对象</li>\n</ul>\n<!--more-->  \n<pre><code class=\"language-js\">function Storage(userId, sep){\n  this.userId = userId  // 开发者标识\n  this.sep = sep || '|_|'       // 数据分隔符\n  this.Storage = localStorage || window.localStorage\n  this.status = { // 操作状态值\n    FAILUER: 0,   // 失败\n    SUCCESS: 1,   // 成功\n    TIMEOUT: 2,   // 过期\n    OVERFLOW: 3   // 溢出\n  }\n}\n</code></pre>\n<ul>\n<li>之后我们需要对这个类提供操作方法，常用的方法为get,set,remove，get方法一般接受键名与一个回调函数，set接受键名，键值，有限期与回调函数，remove接收一个键名与一个回调函数，下面我们分别来实现这几个方法</li>\n<li>为了Storage实例可以调用这几个方法，所以我们将其绑定到Storage的原型上面</li>\n</ul>\n<pre><code class=\"language-js\">Storage.prototype = {\n  // 方便后续获取键名\n  getKey: function(key){\n    return this.userId + key\n  },\n  get: function(userKey, cb){\n    let key = this.getKey(userKey)\n    let status = this.status.SUCCESS\n    let value, sepIndex, time, result\n    try {\n      value = this.Storage.getItem(key)\n    } catch(e) {\n      value = null\n      status = this.status.FAILURE\n      result = {\n        value,\n        status\n      }\n      cb &#x26;&#x26; cb(result)\n      return result\n    }\n    if(value) {\n      sepIndex = value.indexOf(this.sep)\n      time = value.slice(0, sepIndex)\n      // 查看内容是否过期\n      if(new Date().getTime() &#x3C; new Date(time).getTime() || +time === 0){\n        value = value.slice(sepIndex + this.sep.length)\n      } else {\n        status = this.status.TIMEOUT\n        value = null\n        this.remove(key)\n      }\n    } else {\n      value = null\n    }\n    result = {\n      value,\n      status\n    }\n    cb &#x26;&#x26; cb(result)\n    return result\n  },\n  set: function(userKey, value, time, time = 0, cb){\n    let key = this.getKey(userKey)\n    let status = this.status.FAILURE\n    let result\n    // 是否设置时间，未设置默认一个月\n    try {\n      time = new Date(time).getTime()\n    } catch (e) {\n      time = new Date().getTime() + 30 * 24 * 60 * 60 * 1000\n    }\n    const realValue = time + this.sep + value\n    // 检查是否数据过多溢出\n    try {\n      this.Storage.setItem(key, realValue)\n    } catch (e) {\n      status = this.status.OVERFLOW\n    }\n    result = {\n      status\n    }\n    cb &#x26;&#x26; cb(result)\n    return result\n  },\n  remove: function(userKey, cb){\n    let status = this.status.FAILUER\n    let key = this.getKey(userKey)\n    let result\n    try {\n      this.Storage.removeItem(key)\n      status = this.status.SUCCESS\n    } catch(e) {\n    }\n    result = {\n      status\n    }\n    cb &#x26;&#x26; cb(result)\n    return result\n  }\n}\n</code></pre>\n<ul>\n<li>上面就是我们对Storage操作方法的实现，实现很简单，主要是处理一下各个情况下的状态值还有错误屏蔽，防止意外报错</li>\n<li>下面我们可以尝试一下为张三设置一下存储信息</li>\n</ul>\n<pre><code class=\"language-js\">let zsStorage = new Storage('zhangsan-')\nmyStorage.set('name', '张三')  // zhangsan-name: 0|_|张三\nmyStorage.get('name')         // {value: '张三', status: 1}\nmyStorage.remove('name')\n</code></pre>\n<ul>\n<li>这样一来就可以实现了一个适合我们使用的Storage的工具类</li>\n</ul>","frontmatter":{"title":"storage工具类的封装","date":"2019-11-01","tags":["JavaScript回顾","设计模式","进修"],"categories":"JavaScript"},"fields":{"slug":"/storage/"}}},"pageContext":{"slug":"/storage/"}},"staticQueryHashes":["2566592090"]}