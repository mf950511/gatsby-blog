{"componentChunkName":"component---src-templates-blog-small-jsx","path":"/blog/iterator_loop/","result":{"data":{"markdownRemark":{"html":"<h1>采用迭代器形式封装轮播图对象</h1>\n<ul>\n<li>轮播图是我们开发中经常需要实现的一个小功能，但是应用于不同的场景需要对应不同的效果，有的需要淡入淡出，有的需要左侧划入，有的则需要上一张下一张的按钮</li>\n<li>如果针对每个效果都要重新实现的话就会做太多的无用功，所以我们可以看看轮播图的共同点，然后封装一个迭代函数来帮助我们处理轮播图</li>\n<li>轮播图都会接收一个数组作为图片的来源，轮播中我们可能会遇到上一张下一张的显示，所以我们对上一张下一张还有第一张与最后一张做特殊处理，也有可能会对轮播对象中的几个图片不做显示</li>\n<li>所以我们可以提供一个迭代器对象，能对外提供操作数据的方法，包括next、pre、first、last的获取，包括对所有元素的初始化方法，包括对个别元素的操作方法</li>\n</ul>\n<!--more-->\n<pre><code class=\"language-js\">function Iterator(item) {\n  let container = document.querySelector('.container')\n  let items = container.getElementsByTagName(item)\n  let length = items.length\n  let index = 0\n  return {\n    // 获取下一张\n    next: function(){\n      if(index === length - 1) {\n        index = length - 1\n        return null\n      } else {\n        return items[++index]\n      }\n    },\n    // 获取下一张\n    pre: function(){\n      if(index === 0) {\n        index = 0\n        return null\n      } else {\n        return items[--index]\n      }\n    },\n    // 获取第一张\n    first: function(){\n      return items[0]\n    },\n    // 获取最后一张\n    last: function(){\n      return items[length - 1]\n    },\n    // 获取指定序号一张\n    get: function(index){\n      index = index >= 0 ? index % length : index % length + length\n      return items[index]\n    },\n    // 所有图片统一处理方式\n    dealEach: function(fn){\n      Array.prototype.slice.call(items).forEach(item => {\n        fn.call(item)\n      })\n    },\n    // 单张图片特殊处理函数\n    dealItem: function(index, fn){\n      fn.call(items[index])\n    },\n    // 部分图片的排他处理\n    exclusive: function(num, allFn, itemFn){\n      this.dealEach(allFn)\n      if(Object.prototype.toString.call(num) === '[object Array]') {\n        num.forEach(item => {\n          this.dealItem(item, itemFn)\n        })\n      } else {\n        this.dealItem(num, itemFn)\n      }\n    }\n  }\n}\n</code></pre>\n<ul>\n<li>上面我们提供了一个处理轮播图对象的迭代器函数，分别对外暴露了pre,next,last,first,get,dealEach,dealItem,exlusive几个功能函数，使用时只需要指定轮播对象就可以正常使用了，使用方法如下</li>\n</ul>\n<pre><code class=\"language-js\">  var it = Iterator('li')\n  console.log(it.first()) // 获取第一个对象\n  console.log(it.next())  // 获取下一个对象\n  console.log(it.pre())   // 获取上一个对象\n  console.log(it.last())  // 获取最后一个对象\n\n  // 为元素统一设置背景色\n  it.dealEach(function(){\n    this.style.background = 'red'\n  })\n  // 单个元素修改其内容\n  it.dealItem([2], function(){\n      this.innerHTML = 'dealItem'\n  })\n  // 修改其他元素内容\n  it.exclusive([1,3], function(){\n      this.innerHTML = 'exclusive'\n  }, function(){\n      console.log(234, this)\n      this.innerHTML = 'each'\n  })\n</code></pre>\n<ul>\n<li>这样就提供了轮播图的操作对象，具体的轮播实现还要看各自的需求，借助这个轮播对象应该都会比较轻松</li>\n</ul>","frontmatter":{"title":"迭代器在轮播图中的应用","date":"2019-10-31","tags":["JavaScript回顾","设计模式","进修"],"categories":"JavaScript"},"fields":{"slug":"/iterator_loop/"}}},"pageContext":{"slug":"/iterator_loop/"}},"staticQueryHashes":["2566592090"]}