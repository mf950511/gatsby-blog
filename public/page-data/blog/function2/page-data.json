{"componentChunkName":"component---src-templates-blog-small-jsx","path":"/blog/function2/","result":{"data":{"markdownRemark":{"html":"<h1>函数</h1>\n<h2>递归</h2>\n<ul>\n<li>递归函数通常是一个函数通过名称自己调用自己</li>\n</ul>\n<pre><code class=\"language-js\">// 耦合性太强\nfunction factorial(num){\n  if(num &#x3C;= 1) {\n    return 1\n  } else {\n    return num * factorial(num - 1)\n  }\n}\n\n// 严格模式下报错\nfunction factorial(num){\n  if(num &#x3C;= 1) {\n    return 1\n  } else {\n    return num * arguments.callee(num - 1)\n  }\n}\n</code></pre>\n<ul>\n<li>\n<p>这样是我们的第一感觉，但是上一章说过，这样的话如果把它赋值给其他变量就会出问题，所以上一章我们用的是arguments.callee来进行调用，但是这样在严格模式下报错，所以我们可以使用命名函数表达式来完成，如下</p>\n<!--more-->\n<pre><code class=\"language-js\">const factorial = (function f(num){\nif(num &#x3C;= 1) {\nreturn 1\n} else {\nreturn num * f(num - 1)\n}\n})\n</code></pre>\n</li>\n<li>这样就实现了我们的一个通用递归方式</li>\n</ul>\n<h2>尾调用优化</h2>\n<ul>\n<li>ECMAScript 6新增了一项内存管理优化机制，让JavaScript引擎在满足条件时可以重用栈帧。这个优化很适合“尾调用”，即外部函数的返回值是内部函数的返回值</li>\n</ul>\n<pre><code class=\"language-js\">function outerFunction(){\n  return innerFuntion() // 尾调用\n}\n</code></pre>\n<ul>\n<li>\n<p>ES6优化之前，会有下操作</p>\n<ul>\n<li>执行到outerFunction函数体，第一个栈帧被推倒栈上</li>\n<li>执行outerFunction函数体，到return语句，需要计算innerFunction</li>\n<li>执行到innerFunction函数体，第二个栈帧被推到栈上</li>\n<li>执行innerFunction函数体，计算返回值</li>\n<li>将返回值传回outerFunction，然后再返回</li>\n<li>将栈帧弹出栈</li>\n</ul>\n</li>\n<li>\n<p>优化后</p>\n<ul>\n<li>执行到outerFunction函数体，第一个栈帧被推倒栈上</li>\n<li>执行outerFunction函数体，到return语句，需要计算innerFunction</li>\n<li>引擎发现将第一个栈帧弹出去也不影响，因为outerFunction的返回值跟innerFunction的返回值一直</li>\n<li>弹出outerFunction的栈帧</li>\n<li>执行到innerFunction函数体，栈帧被推到栈上</li>\n<li>执行innerFunction函数体，计算返回值</li>\n<li>将innerFunction的栈帧弹出栈外</li>\n</ul>\n</li>\n<li>能看出，第一种情况下每多一层嵌套就会多一个栈帧。而第二种情况无论多少次嵌套函数，都只有一个栈帧。</li>\n<li>这就是ES6尾调用优化的关键：如果函数的逻辑允许尾调用将其销毁，那引擎就会这么干</li>\n</ul>\n<h3>尾调用优化的条件</h3>\n<ul>\n<li>\n<p>尾调用优化的条件就是确定外部栈帧没必要存在了，条件如下</p>\n<ul>\n<li>代码在严格模式下执行</li>\n<li>外部函数的返回值是对尾调用函数的调用</li>\n<li>尾调用函数返回后不需执行额外操作</li>\n<li>尾调用函数不是引用外部函数作用域中自由变量的闭包</li>\n</ul>\n</li>\n<li>下面是几个违反上述条件的函数</li>\n</ul>\n<pre><code class=\"language-js\">'use strict'\n// 无优化： 尾调用无返回\nfunction outerFunction(){\n  innerFunction()\n}\n\n// 无优化： 尾调用没有直接返回\nfunction outerFunction(){\n  let result = innerFunction()\n  return result\n}\n\n// 无优化： 尾调用后必须转为字符串\nfunction outerFunction(){\n  return innerFunction().toString()\n}\n\n// 无优化： 尾调用是个闭包\nfunction outerFunction(){\n  let foo = 'bar'\n  function innerFunction(){\n    return foo\n  }\n  return innerFunction()\n}\n</code></pre>\n<ul>\n<li>下面是符合条件的例子</li>\n</ul>\n<pre><code class=\"language-js\">'use strict'\n// 有优化：栈帧销毁前执行计算\nfunction outerFunction(a, b){\n  return innerFunction(a + b)\n}\n\n// 有优化：初识返回值不涉及栈帧\nfunction outerFunction(a, b){\n  if(a &#x3C; b) {\n    return a\n  }\n  return innerFunction(a + b)\n}\n\n// 有优化：两个内部函数都在尾部\nfunction outerFunction(condition){\n  return condition ? innerFunctionA() : innerFunctionB()\n}\n</code></pre>\n<ul>\n<li>差异化尾调用跟递归尾调用容易让人混淆，无论递归尾调用还是非递归尾调用，都可以应用优化。这个优化在递归下最明显，因为递归代码最容易在栈内存中产生大量栈帧</li>\n<li>之所以要求严格模式是因为非严格模式下函数调用中允许使用f.arguments跟f.caller，而它们都引用外部函数的栈帧。所以无法使用优化了</li>\n<li>尾调用优化的代码</li>\n</ul>\n<pre><code class=\"language-js\">function fib(n) {\n  if(n &#x3C; 2) {\n    return n\n  }\n  return fib(n - 1) + fib(n - 2)\n}\n</code></pre>\n<ul>\n<li>这里的函数尾部执行了相加操作，所以不符合尾调用优化的原则，所以fib(n)的栈帧数的内存复杂度为o(2^n)，所以简单地调用fib(1000)也会给浏览器带来麻烦</li>\n<li>所以我们可以对其进行优化让其满足条件，为此使用两个函数，外层函数作为基础框架，内部函数执行递归</li>\n</ul>\n<pre><code class=\"language-js\">'use strict'\nfunction fib(n){\n  return fibImpl(0, 1, n)\n}\n\nfunction fibImpl(a, b, n){\n  if(n === 0) {\n    return a\n  }\n  return fibImpl(b, a + b, n - 1)\n}\nfib(1000)\n</code></pre>\n<ul>\n<li>重构之后在执行就不会有这个问题了，可以正常得出结果</li>\n</ul>\n<h2>闭包</h2>\n<ul>\n<li>闭包是指那些引用了另一个函数作用域中变量的函数，通常是在嵌套函数中使用。</li>\n<li>闭包形成的原因，在调用一个函数时，会为函数调用创建一个执行上下文，并创建作用域链。</li>\n<li>然后用arguments和其他参数来初始化这个函数的活动对象。外部函数的活动对象是内部函数作用域链的第二个对象。</li>\n<li>这个作用域链一直向外串起所有包含函数的活动对象，一直到全局执行上下文才终止</li>\n<li>函数执行时，每个执行上下文都会有一个包含其中变量的对象，全局上下文中叫变量对象，会在代码执行期间一直存在。函数局部上下文中的叫活动对象，只在函数执行期间存在。</li>\n</ul>\n<pre><code class=\"language-js\">function compare(value1, value2){\n  if(value1 &#x3C; value2) {\n    return -1\n  } else if (value1 > value2) {\n    return 1\n  } else {\n    return 0\n  }\n}\nlet result = compare(5, 10)\n</code></pre>\n<ul>\n<li>compare函数是在全局上下文中调用的。第一次调用会为它创建一个包含arguments、value1、value2的活动对象，这个对象就是它作用域链的第一个对象</li>\n<li>全局上下文的变量对象则是compare()作用域链上面的第二个对象，包含了this、result、compare</li>\n<li>定义这个函数时，会先为它创建作用域链，然后预先将全局变量对象，并保存在内部的[[Scope]]中。调用这个函数时，会创建相应的上下文，然后通过复制函数的[[Scope]]来创建器作用域链。</li>\n<li>接着会创建函数的活动对象（用作变量对象）并把它放到作用域链的前端。上面这个例子意味着compare()函数执行上下文的作用域链中有两个变量对象：局部变量对象和全局变量对象。作用域链其实是一个包含指针的列表，每个指针分别指向一个变量对象。</li>\n<li>函数内部访问变量时，就会按照给定的名称从作用域中查找变量。函数执行完成后，局部活动对象被销毁，内存中就只剩全局作用域。</li>\n<li>函数内部定义的函数会把它的包含函数的活动对象添加到自己的作用域链中。然后它就可以访问到包含对象的全部变量，因为它有着包含对象的活动对象的引用，所以包含函数执行完成后不能销毁，只有等函数内部定义的函数被销毁它才能销毁</li>\n<li>闭包保留了它的包含函数的作用域，所以比其他函数更占内存，所以除非必要，不然不使用闭包</li>\n</ul>\n<h2>内存泄漏</h2>\n<ul>\n<li>由于IE9之前对JScript对象跟COM对象的垃圾回收机制不一致，所以闭包在旧版本可能会出问你。在部分版本下，将html闭包就会导致它不能被销毁</li>\n</ul>\n<pre><code class=\"language-js\">function assignHandler(){\n  let element = document.getElementById('someElement')\n  element.onclick = () => console.log(element.id)\n}\n</code></pre>\n<ul>\n<li>这里创建了一个闭包，即element元素的事件处理程序。事件处理程序又创建了循环引用。匿名函数引用着assignHandler的活动对象，阻止了对element的引用计数归零。所以只要匿名函数存在，element的引用次数就至少为1，所以内存无法回收</li>\n</ul>\n<pre><code class=\"language-js\">function assignHandler(){\n  let element = document.getElementById('someElement')\n  let id = element.id\n  element.onclick = () => console.log(id)\n  element = null\n}\n</code></pre>\n<ul>\n<li>这样我们把element.id替换为一个新的id字段去除了循环引用，但是还不够，因为匿名函数引用着包含对象的活动对象，活动对象包含了element。</li>\n<li>所以闭包没有直接引用element，但是包含活动对象还存在着它的引用，所以需要把它设为null解除引用</li>\n</ul>\n<h2>私有变量与特权方法</h2>\n<ul>\n<li>JavaScript没有私有成员概念，但是有私有变量的概念，在函数内部的变量都是函数私有的，函数外部无法访问。私有变量包含函数参数、局部变量、函数内部定义的其他函数</li>\n<li>特权方法是能够访问函数私有变量的公有方法。在对象上创建特权方法的方式有两种，一种是构造函数中实现</li>\n</ul>\n<pre><code class=\"language-js\">function MyObject(){\n  let privateVariable = 10\n  function privateFunction(){\n    return false\n  }\n  this.publicMethod = function(){\n    privateVariable++\n    return privateFunction()\n  }\n}\n</code></pre>\n<ul>\n<li>这是将私有变量跟方法都定义在构造函数中，然后创建一个能访问这些私有成员的特权方法，因为特权方法是一个闭包，可以访问构造函数的所有成员，所以可以使用它来访问</li>\n<li>每个特权方法都由自己的privateVariable，因为每次调用构造函数都会重新创建一套变量跟方法，也就导致这种模式有一个缺点：每个实例都会重新创建一遍新方法</li>\n<li>另一种是通过私有作用域定义私有变量跟函数来实现</li>\n</ul>\n<pre><code class=\"language-js\">(function(){\n  let privateVariable = 10\n  function privateFunction(){\n    return false\n  }\n  MyObject = function(){}\n  MyObject.prototype.publicMethod = function(){\n    privateVariable++\n    return privateFunction()\n  }\n})()\n</code></pre>\n<ul>\n<li>这里，匿名函数定义了私有变量和私有方法，然后又定义了构造函数和公有方法。公有方法定义在构造函数原型上。</li>\n<li>这里生命MyObject没有使用关键字，所以会被创建到全局作用域中，所以MyObject可以在外部被访问（严格模式下不使用关键字声明会报错）</li>\n<li>这样的话私有变量跟私有方法是全部实例共享了，因为特权方法是在原型上，所以由全部实例共享</li>\n<li>这样创建的好处就是可以更好地重用代码，但是也导致了每个实例都没有了私有变量</li>\n<li>闭包跟私有变量会让作用域链变长，作用域链越长，查找变量所需时间越长</li>\n</ul>","frontmatter":{"title":"函数-闭包--高程4","date":"2020-12-11","tags":["JavaScript回顾"],"categories":"JavaScript"},"fields":{"slug":"/function2/"}}},"pageContext":{"slug":"/function2/"}},"staticQueryHashes":["2566592090"]}