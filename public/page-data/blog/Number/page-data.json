{"componentChunkName":"component---src-templates-blog-small-jsx","path":"/blog/Number/","result":{"data":{"markdownRemark":{"html":"<h1>Number 类型</h1>\n<ul>\n<li>Number对象也重写了toString、toLocalString、valueOf方法</li>\n<li>valueOf返回原数值</li>\n<li>toString()接收一个参数用于表示该数字的几进制数，如下</li>\n</ul>\n<pre><code class=\"language-js\">let num = 10\nconsole.log(num.toString()) // '10'\nconsole.log(num.toString(2)) // '1010'\nconsole.log(num.toString(8)) // '12'\nconsole.log(num.toString(10)) // '10'\nconsole.log(num.toString(16)) // 'a'\n</code></pre>\n<ul>\n<li>toExponential()用于表示数值的科学技术法的表示字符串</li>\n</ul>\n<pre><code class=\"language-js\">console.log(num.toExponential()) // 1e+1\n</code></pre>\n<ul>\n<li>\n<p>toPrecision()会根据你传入的参数决定输出结果，该参数表示结果中的数字的位数，如下</p>\n<!--more-->\n<pre><code class=\"language-js\">let num1 = 99\nconsole.log(num1.toPrecision(1)) // 1e+2\nconsole.log(num1.toPrecision(2)) // 99\nconsole.log(num1.toPrecision(3)) // 99.0\n</code></pre>\n</li>\n<li>ES6新增isInteger()用于判断是否是整数</li>\n</ul>\n<pre><code class=\"language-js\">console.log(Number.isInteger(1)) // true\nconsole.log(Number.isInteger(1.00)) // true\nconsole.log(Number.isInteger(1.01)) // false\n</code></pre>\n<ul>\n<li>该方法不会受到小数点后都是0的影响</li>\n<li>IEEE 754数值格式有一个特殊的数值范围，此范围内的二进制值可表示一个整数，该范围为Number.MIN<em>SAFE</em>INTEGER((-2) ** 53 + 1) 到 Number.MAX<em>SAFE</em>INTEGER(2 ** 53 - 1)</li>\n<li>超出这个范围的值在保存为整数时数值可能会变化，所以我们可以通过 Number.isSafeInteger()来判断一个整数是否在该范围内</li>\n</ul>\n<pre><code class=\"language-js\">console.log(Number.isSafeInteger(-1 * (2 ** 53))) // false\nconsole.log(Number.isSafeInteger(-1 * (2 ** 53) + 1)) // true\n</code></pre>","frontmatter":{"title":"Number类型","date":"2020-10-12","tags":["JavaScript回顾"],"categories":"JavaScript"},"fields":{"slug":"/Number/"}}},"pageContext":{"slug":"/Number/"}},"staticQueryHashes":["2566592090"]}