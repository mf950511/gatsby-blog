{"componentChunkName":"component---src-templates-blog-small-jsx","path":"/blog/react_md_2/","result":{"data":{"markdownRemark":{"html":"<h1>从零搭建一个react-hooks项目（二）</h1>\n<ul>\n<li>上一篇搭建了基本的webpack项目，可以支持react，less的基本使用，但是没有考虑到项目中的实际情况，例如生产环境的代码混淆，代码压缩，开发环境的热启动等。</li>\n<li>下面我们就针对开发与生产环境的不同需求，对webpack进行下一步的配置</li>\n<li>生产环境的配置与开发环境的配置有很多的不同点，所以我们需要分别建对应的配置文件，在根目录下分别创建 webpack.prod.js（生产配置） 与webpack.dev.js（开发配置）</li>\n<li>然后在package.json中的scripts里新建两个命令，分别是 \"build\": \"webpack --config webpack.prod.js\", \"dev\": \"webpack --config webpack.dev.js\"</li>\n</ul>\n<h2>开发环境的配置</h2>\n<ul>\n<li>先将webpack.config.js中的配置复制到webpack.dev.js中，然后进行我们的基本配置修改</li>\n<li>首先开发中需要对错误进行一个精准定位，所以在配置中开启 devtool: \"inline-source-map\"，如下所示</li>\n<li>css的样式覆盖关系在我们之前的开发中就已经使用了source: map的属性，所以可以在开发环境中继续使用</li>\n</ul>\n<!--more-->\n<pre><code class=\"language-js\">const path = require('path')\nconst webpack = require('webpack')\nconst { CleanWebpackPlugin } = require('clean-webpack-plugin');\nconst HTMLWebpackPlugin = require('html-webpack-plugin')\n\nmodule.exports = {\n  entry: {\n    app: './index.js',\n    test: './index.jsx'\n  },\n  output: {\n    filename: '[name].js',\n    path: path.resolve(__dirname, 'dist'),\n    chunkFilename: '[name].bundle.js'\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.(le|c)ss$/,\n        use: [\n          'style-loader',\n          {\n            loader: 'css-loader',\n            options: {\n              sourceMap: true //是否打开样式查找\n            }\n          },\n          {\n            loader: 'postcss-loader', // 为浏览器加前缀\n            options: {\n              ident: 'postcss',\n              sourceMap: true,\n              plugins: loaders => [\n                require('autoprefixer')({\n                })\n              ]\n            }\n          },\n          {\n            loader: 'less-loader', // 解析样式文件\n            options: {\n              sourceMap: true\n            }\n          }\n        ]\n      },\n      {\n        test: /\\.(js)x?$/,\n        use: ['babel-loader'],\n        exclude: /node-modules/\n      }\n    ]\n  },\n  devtool: 'inline-source-map',\n  plugins: [\n    new HTMLWebpackPlugin({\n      inject: true, // 所有js脚本放于body之后\n      hash: true, // 为静态资源生成hash，用于清楚缓存\n      cache: true, // 仅在文件被更改时发出文件\n      title: 'react admin',\n      filename: 'index.html',\n      template: path.resolve(__dirname, 'index.html'),\n      minify: {\n        collapseWhitespace: true, // 折叠空白\n        removeComments: true, // 删除注释\n        removeRedundantAttributes: true,\n        removeScriptTypeAttributes: true,\n        removeStyleLinkTypeAttributes: true\n      }\n    }),\n    new CleanWebpackPlugin()\n  ]\n}\n</code></pre>\n<ul>\n<li>接着在我们的开发过程中我们不希望每做一次改动都需要手动的执行一次npm run dev，所以我们这里使用我们的webpack-dev-server来为我们提供node的静态服务，配合webpack的打包可以让我们实现实时更新，实时显示，不需要手动触发npm run dev命令来进行刷新</li>\n<li>首先我们修改package.json中的dev命令为:\"webpack-dev-server --open --config webpack.dev.js\"</li>\n<li>接下来就需要对该静态服务进行配置，配置项放在配置中的devServer下面，如下</li>\n</ul>\n<pre><code class=\"language-js\">const path = require('path')\nconst webpack = require('webpack')\nconst { CleanWebpackPlugin } = require('clean-webpack-plugin');\nconst HTMLWebpackPlugin = require('html-webpack-plugin')\n\nmodule.exports = {\n  entry: {\n    ...\n  },\n  output: {\n    ...\n  },\n  module: {\n    ...\n  },\n  devtool: 'inline-source-map',\n  plugins: [\n    ...\n  ],\n  devServer: {\n    contentBase: './dist', // 静态文件目录，用于浏览器显示\n    clientLogLevel: 'warning',  // 输出日志级别\n    hot: true, // 启动热更新\n    publicPath: '/', // 浏览器访问路径\n    compress: true, // 启用gzip压缩\n    port: 9998,\n    open: true, // 自动调起浏览器\n    overlay: { // 出现错误或警告是否覆盖页面线上错误信息\n      warnings: true,\n      errors: true\n    },\n    quiet: true,\n    proxy: { // 代理\n    },\n    watchOptions: { // 监控文件相关配置\n      poll: true,\n      ignored: /node_modules/,\n      aggregateTimeout: 300  // 默认值, 当你连续改动时候, webpack可以设置构建延迟时间(防抖)\n    }\n  }\n}\n</code></pre>\n<ul>\n<li>然后在执行我们的npm run dev就可以发现会自动帮我们打开浏览器，然后当我们修改主要文件的时候也会重新帮我们刷新页面</li>\n<li>上面的自动刷新在某些场景下会有一些问题，当依赖的模块发生改变时可能当前的页面绑定关系不能即时刷新，所以我们需要引入新的模块来进行问题修复</li>\n<li>webpack 自带模块热替换插件 HotModuleReplacementPlugin ，使用时只需要引入webpack，然后在plugin中添加 new webpack.HotModuleReplacementPlugin()即可解决部分依赖刷新不及时的问题，如下</li>\n</ul>\n<pre><code class=\"language-js\">...\nconst webpack = require('webpack')\n\nmodule.exports = {\n  entry: {\n    ...\n  },\n  output: {\n    ...\n  },\n  module: {\n    ...\n  },\n  devtool: 'inline-source-map',\n  plugins: [\n    new webpack.HotModuleReplacementPlugin(),\n    ...\n  ],\n  devServer: {\n    ...\n  }\n}\n</code></pre>\n<ul>\n<li>再次执行npm run dev就能实时的更改代码并实时刷新了，至此，开发环境的基本配置就完成了</li>\n</ul>\n<h2>生产环境的构建</h2>\n<ul>\n<li>生产环境为了客户的体验与代码的隐私性，我们一般都会对代码进行混淆压缩，包括css与js代码的压缩，下面我们就来进行相关的配置</li>\n<li>首先还是将我们之前的webpack.config.js中的基本配置复制到webpack.prod.js中，然后在此基础上进行相关的修改</li>\n<li>上一章中我们将output中的filename命名为[name].js与入口文件一致，在生产环境中，为了避免名称一致导致的缓存问题，我们要对其进行修改</li>\n<li>修改为[name].[chunkhash].js，这样在生成文件的时候会默认添加一个hash值，避免缓存问题的出现，修改如下</li>\n</ul>\n<pre><code class=\"language-js\">// 先贴一下上一章最后的配置内容，后续不再完整展示\nconst path = require('path')\nconst webpack = require('webpack')\nconst { CleanWebpackPlugin } = require('clean-webpack-plugin');\nconst HTMLWebpackPlugin = require('html-webpack-plugin')\n\nmodule.exports = {\n  entry: {\n    app: './index.js',\n    test: './index.jsx'\n  },\n  output: {\n    filename: '[name].[chunkhash].js',\n    path: path.resolve(__dirname, 'dist'),\n    chunkFilename: '[name].bundle.js'\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.(le|c)ss$/,\n        use: [\n          'style-loader',\n          {\n            loader: 'css-loader',\n            options: {\n              sourceMap: true //是否打开样式查找\n            }\n          },\n          {\n            loader: 'postcss-loader', // 为浏览器加前缀\n            options: {\n              ident: 'postcss',\n              sourceMap: true,\n              plugins: loaders => [\n                require('autoprefixer')({\n                })\n              ]\n            }\n          },\n          {\n            loader: 'less-loader', // 解析样式文件\n            options: {\n              sourceMap: true\n            }\n          }\n        ]\n      },\n      {\n        test: /\\.(js)x?$/,\n        use: ['babel-loader'],\n        exclude: /node-modules/\n      }\n    ]\n  },\n  plugins: [\n    new HTMLWebpackPlugin({\n      inject: true, // 所有js脚本放于body之后\n      hash: true, // 为静态资源生成hash，用于清楚缓存\n      cache: true, // 仅在文件被更改时发出文件\n      title: 'react admin',\n      filename: 'index.html',\n      template: path.resolve(__dirname, 'index.html'),\n      minify: {\n        collapseWhitespace: true, // 折叠空白\n        removeComments: true, // 删除注释\n        removeRedundantAttributes: true,\n        removeScriptTypeAttributes: true,\n        removeStyleLinkTypeAttributes: true\n      }\n    }),\n    new CleanWebpackPlugin()\n  ]\n}\n</code></pre>\n<ul>\n<li>执行npm run build之后打开dist文件夹发现生成的文件都会带一串乱码，这样就避免了线上缓存的问题</li>\n<li>接下来我们需要打开完整的错误调试，方便线上查找问题，还是修改devtool为source-map即可，如下</li>\n</ul>\n<pre><code class=\"language-js\">...\n\nmodule.exports = {\n  entry: {\n    ...\n  },\n  devtool: 'source-map',\n  output: {\n    ...\n  },\n  ...\n}\n</code></pre>\n<ul>\n<li>然后我们尝试在index.js中主动抛出错误，执行npm run build后在浏览器点击错误就可以定位到相关错误的地方，便于错误排查</li>\n<li>然后我们就需要进行代码的压缩混淆，减少代码体积，先对js进行代码压缩，这里我们需要引用插件 terser-webpack-plugin ，先进行下载，命令为： cnpm i terser-webpack-plugin -D ，然后在配置文件中进行相关配置，如下</li>\n</ul>\n<pre><code class=\"language-js\">const path = require('path')\nconst webpack = require('webpack')\nconst { CleanWebpackPlugin } = require('clean-webpack-plugin');\nconst HTMLWebpackPlugin = require('html-webpack-plugin')\nconst TerserWebpackPlugin = require('terser-webpack-plugin')\n\nmodule.exports = {\n  entry: {\n    ...\n  },\n  devtool: 'source-map',\n  output: {\n    ...\n  },\n  module: {\n    ...\n  },\n  plugins: [\n    ...\n  ],\n  optimization: {\n    minimizer: [\n      // js压缩\n      new TerserWebpackPlugin({\n        cache: true, // 启用文件缓存\n        parallel: true, // 多线程调用\n        sourceMap: true // 错误排查\n      }),\n    ]\n  }\n}\n</code></pre>\n<ul>\n<li>接下来就是对css文件的打包进行处理，首先我们要将css文件给单独打包出来，我们可以观察到之前打包出来的文件其实是没有css文件的，因为webpack把所有的文件都打到一个文件里面了，所以我们没办法看到它，这其实对最后的生成的项目并不友好，所以我们先要在打包中将css抽离出来，这里我们就需要一个新的包 mini-css-extract-plugin ，还是使用npm下载此包： npm i mini-css-extract-plugin -D，然后在loader中将其配置起来</li>\n<li>首先我们在页面中引用该插件，然后将style-loader替换为它提供的loader，然后在plugins中进行css抽离的命名规则配置，为避免缓存问题，我们还是采用hash值进行命名，配置如下</li>\n</ul>\n<pre><code class=\"language-js\">...\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin')\n\nmodule.exports = {\n  entry: {\n    ...\n  },\n  devtool: 'source-map',\n  output: {\n    ...\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.(le|c)ss$/,\n        use: [\n          MiniCssExtractPlugin.loader, // 替换了原来的style-loader\n          {\n            loader: 'css-loader',\n            options: {\n              sourceMap: true //是否打开样式查找\n            }\n          },\n          {\n            loader: 'postcss-loader', // 为浏览器加前缀\n            options: {\n              ident: 'postcss',\n              sourceMap: true,\n              plugins: loaders => [\n                require('autoprefixer')({\n                })\n              ]\n            }\n          },\n          {\n            loader: 'less-loader', // 解析样式文件\n            options: {\n              sourceMap: true\n            }\n          }\n        ]\n      },\n      ...\n    ]\n  },\n  plugins: [\n    new MiniCssExtractPlugin({// 将css打包成单独的css文件\n      filename: '[name].[hash:5].css',\n      chunkFilename: '[id].[hash:5].css'\n    }),\n    ...\n  ]\n  \n}\n</code></pre>\n<ul>\n<li>然后在运行npm run build就可以发现我们打出来的文件中出现了app.xxxxx.css的文件</li>\n<li>接下来我们就要对css进行压缩了，css的压缩需要使用 optimize-css-assets-webpack-plugin 插件，还是npm下载该插件 npm i optimize-css-assets-webpack-plugin -D，然后在webpack中进行相关配置，跟js的配置一样，需要放置在optimization 下的 minimizer 中，如下</li>\n</ul>\n<pre><code class=\"language-js\">const path = require('path')\nconst webpack = require('webpack')\nconst { CleanWebpackPlugin } = require('clean-webpack-plugin');\nconst HTMLWebpackPlugin = require('html-webpack-plugin')\nconst TerserWebpackPlugin = require('terser-webpack-plugin')\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin')\nconst OptimizeCssAssetsWebpackPlugin = require('optimize-css-assets-webpack-plugin')\n\nmodule.exports = {\n  entry: {\n    ...\n  },\n  devtool: 'source-map',\n  output: {\n    ...\n  },\n  module: {\n    ...\n  },\n  plugins: [\n    ...\n  ],\n  optimization: {\n    minimizer: [\n      // js压缩\n      new TerserWebpackPlugin({\n        cache: true, // 启用文件缓存\n        parallel: true, // 多线程调用\n        sourceMap: true // 错误排查\n      }),\n      new OptimizeCssAssetsWebpackPlugin({}) // css压缩\n    ]\n  }\n}\n</code></pre>\n<ul>\n<li>到这我们就基本完成了开发与生产环境的各自配置，接下来我们就继续对项目需要进行相应的处理</li>\n<li>观察上面的开发与生产配置，其实还是有一部分的公用配置可以抽离出来，这里我们采用webpack-merge包来将其公共配置分离出来</li>\n<li>还是先下载该包：npm i webpack-merge -D</li>\n<li>然后在根目录新建一个webpack.common.js用来放置我们的公共配置</li>\n<li>观察开发与生产配置，抽离公共的配置如下</li>\n</ul>\n<pre><code class=\"language-js\">// webpack.common.js\nconst path = require('path')\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\nconst { CleanWebpackPlugin } = require('clean-webpack-plugin')\nmodule.exports = {\n  entry: {\n    app: './index.js',\n    test: './index.jsx'\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.(|js)x?$/,\n        use: ['babel-loader'],\n        exclude: /node-modules/\n      }\n    ]\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      inject: true, // 所有js脚本放于body之后\n      hash: true, // 为静态资源生成hash，用于清楚缓存\n      cache: true, // 仅在文件被更改时发出文件\n      title: 'react admin',\n      filename: 'index.html',\n      template: path.resolve(__dirname, 'index.html'),\n      minify: {\n        collapseWhitespace: true, // 折叠空白\n        removeComments: true, // 删除注释\n        removeRedundantAttributes: true,\n        removeScriptTypeAttributes: true,\n        removeStyleLinkTypeAttributes: true\n      }\n    }),\n    new CleanWebpackPlugin(),\n  ]\n}\n</code></pre>\n<ul>\n<li>之前我们的配置中没有进行代码块的抽离，这里我们也简单的进行一下补充，加一组配置即可，这个是开发与生产公用的，所以我们也加到上面的配置中，如下</li>\n</ul>\n<pre><code class=\"language-js\">// webpack.common.js\nconst path = require('path')\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\nconst { CleanWebpackPlugin } = require('clean-webpack-plugin')\nmodule.exports = {\n  entry: {\n    app: './index.js',\n    test: './index.jsx'\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.(|js)x?$/,\n        use: ['babel-loader'],\n        exclude: /node-modules/\n      }\n    ]\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      inject: true, // 所有js脚本放于body之后\n      hash: true, // 为静态资源生成hash，用于清楚缓存\n      cache: true, // 仅在文件被更改时发出文件\n      title: 'react admin',\n      filename: 'index.html',\n      template: path.resolve(__dirname, 'index.html'),\n      minify: {\n        collapseWhitespace: true, // 折叠空白\n        removeComments: true, // 删除注释\n        removeRedundantAttributes: true,\n        removeScriptTypeAttributes: true,\n        removeStyleLinkTypeAttributes: true\n      }\n    }),\n    new CleanWebpackPlugin(),\n  ],\n  optimization: { // 公共代码抽离\n    splitChunks:{ //启动代码分割，有默认配置项\n      chunks: 'all'\n    }\n  }\n}\n</code></pre>\n<ul>\n<li>这样便配置了我们的代码分割功能，然后就开始继续配置我们的生产与开发配置了</li>\n<li>然后修改webpack.dev.js，先在webpack.dev.js中引入webpack-merge与webpack.common.js，然后进行合并，因为css中的loader与生产环境不一致所以没有抽离，现在的webpack还需要给配置指定mode，取值为production或者deveopment，我们这里为开发配置，所以新增一个字段mode: 'development',最终如下</li>\n</ul>\n<pre><code class=\"language-js\">// webpack.dev.js\nconst path = require('path')\nconst webpack = require('webpack')\nconst merge = require('webpack-merge')\nconst common = require('./webpack.common.js')\n\nmodule.exports = merge(common, {\n  mode: 'development',\n  output: {\n    filename: '[name].js',\n    path: path.resolve(__dirname, 'dist'),\n    chunkFilename: '[name].bundle.js'\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.(le|c)ss$/,\n        use: [\n          'style-loader',\n          {\n            loader: 'css-loader',\n            options: {\n              sourceMap: true //是否打开样式查找\n            }\n          },\n          {\n            loader: 'postcss-loader', // 为浏览器加前缀\n            options: {\n              ident: 'postcss',\n              sourceMap: true,\n              plugins: loaders => [\n                require('autoprefixer')({\n                })\n              ]\n            }\n          },\n          {\n            loader: 'less-loader', // 解析样式文件\n            options: {\n              sourceMap: true\n            }\n          }\n        ]\n      }\n    ]\n  },\n  devtool: 'inline-source-map',\n  plugins: [\n    new webpack.HotModuleReplacementPlugin(), // 模块热替换\n    new webpack.NamedModulesPlugin() // 热更新时返回文件名而不是文件id\n  ],\n  devServer: {\n    contentBase: './dist', // 静态文件目录，用于浏览器显示\n    clientLogLevel: 'warning',  // 输出日志级别\n    hot: true, // 启动热更新\n    publicPath: '/', // 浏览器访问路径\n    compress: true, // 启用gzip压缩\n    port: 8822,\n    open: true, // 自动调起浏览器\n    overlay: { // 出现错误或警告是否覆盖页面线上错误信息\n      warnings: true,\n      errors: true\n    },\n    quiet: true,\n    proxy: { // 代理\n    },\n    watchOptions: { // 监控文件相关配置\n      poll: true,\n      ignored: /node_modules/,\n      aggregateTimeout: 300  // 默认值, 当你连续改动时候, webpack可以设置构建延迟时间(防抖)\n    }\n  }\n})\n</code></pre>\n<ul>\n<li>再运行npm run dev能够发现跟抽离之前的配置是一样的，接下来我们对生产配置也进行一个合并，然后新增一个mode: production</li>\n<li>同样是引入webpack-merge与webpack.common.js，然后进行合并，如下</li>\n</ul>\n<pre><code class=\"language-js\">// webpack.prod.js\nconst path = require('path')\nconst TerserWebpackPlugin = require('terser-webpack-plugin')\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin')\nconst OptimizeCssAssetsWebpackPlugin = require('optimize-css-assets-webpack-plugin')\nconst merge = require('webpack-merge')\nconst common = require('./webpack.common.js')\n\nmodule.exports = merge(common, {\n  mode: 'production',\n  devtool: 'source-map',\n  output: {\n    filename: '[name].[chunkhash].js',\n    path: path.resolve(__dirname, 'dist'),\n    chunkFilename: '[name].bundle.js'\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.(le|c)ss$/,\n        use: [\n          MiniCssExtractPlugin.loader,\n          {\n            loader: 'css-loader',\n            options: {\n              sourceMap: true //是否打开样式查找\n            }\n          },\n          {\n            loader: 'postcss-loader', // 为浏览器加前缀\n            options: {\n              ident: 'postcss',\n              sourceMap: true,\n              plugins: loaders => [\n                require('autoprefixer')({\n                })\n              ]\n            }\n          },\n          {\n            loader: 'less-loader', // 解析样式文件\n            options: {\n              sourceMap: true\n            }\n          }\n        ]\n      }\n    ]\n  },\n  plugins: [\n    new MiniCssExtractPlugin({// 将css打包成单独的css文件\n      filename: '[name].[hash:5].css',\n      chunkFilename: '[id].[hash:5].css'\n    }),\n  ],\n  optimization: {\n    minimizer: [\n      // js压缩\n      new TerserWebpackPlugin({\n        cache: true, // 启用文件缓存\n        parallel: true, // 多线程调用\n        sourceMap: true // 错误排查\n      }),\n      new OptimizeCssAssetsWebpackPlugin({}) // css压缩\n    ]\n  }\n})\n</code></pre>\n<ul>\n<li>上面就完成了生产与开发环境的配置，但是之前的配置还有部分遗漏，一个是在开发环境没有配置css的抽离规则，一个是没有配置react开发中的图片资源加载跟字体库与icon</li>\n<li>下面我们就先针对开发环境的css进行一个处理，之前我们在运行webpack的时候是没办法区分开发与生产环境的，所以我们现在在webpack的命令中设置环境变量，用以区分开发还是生产环境，我们先引用cross-env的包，用于各平台设置环境变量的兼容，命令为 npm i cross-env -D</li>\n<li>然后修改package.json中的启动命令为 \"dev\": \"cross-env NODE<em>ENV=development webpack-dev-server --open --config webpack.dev.js\",  \"build\": \"cross-env NODE</em>ENV=production webpack --config webpack.prod.js\" 然后在webpack.common.js中打印process.env.NODE<em>ENV，然后可以观察到在npm run dev的命令下process.env.NODE</em>ENV是'development'， npm run build 的命令下 process.env.NODE_ENV是'production'，由此，我们来配置css的抽离规则，先将之前配置在webpack.prod.js中的css打包配置删除，然后在webpack.common.js中新增如下配置</li>\n</ul>\n<pre><code class=\"language-js\">// webpack.common.js\nconst path = require('path')\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\nconst { CleanWebpackPlugin } = require('clean-webpack-plugin')\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin')\nconst devMode = process.env.NODE_ENV === 'development' // 命令行设置的值\nconsole.log(devMode)\nmodule.exports = {\n  entry: {\n    ...\n  },\n  module: {\n    ...\n  },\n  plugins: [\n    new MiniCssExtractPlugin({// 将css打包成单独的css文件，在开发与生成生成不同的css\n      filename: devMode ? '[name].css' : '[name].[hash:5].css',\n      chunkFilename: devMode ? '[id].css' : '[id].[hash:5].css'\n    }),\n    ...\n  ]\n}\n</code></pre>\n<ul>\n<li>接下来我们要对图片进行处理，在开发中我们会经常根据当前文件的相对路径来引入图片资源，但是我们的打包又是基于入口文件的，所以经常会导致最后的图片引用路径错误，这里我们就要使用url-loader来帮我们进行图片路径处理，会将我们的引用路径替换为打包后的文件路径。</li>\n<li>url-loader还对我们提供了图片转dataUrl的功能，这样就可以将图片转为dataUrl的路径直接引入，避免了网络请求，但是图片过大的时候会影响我们的编码速率，这种时候还是应该使用网络图片请求。url-loader中的limit就是控制多大的图片以内转为dataUrl，大于该限制的就引用图片地址访问。</li>\n<li>同样，我们还是先下载url-loader的相关包， npm i url-loader file-loader -D</li>\n<li>下面我们就对各格式的图片进行配置，这部分配置生产与开发都要使用，因此在webpack.common.js下配置，配置如下</li>\n</ul>\n<pre><code class=\"language-js\">// webpack.common.js\n...\nmodule.exports = {\n  entry: {\n    ...\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.(jpg|png|gif|svg)$/,\n        use: [\n          {\n            loader: 'url-loader',\n            options: {\n              limit: 10000,\n              name: '[name]-[hash:5].[ext]',\n              outputPath: 'img/'\n            }\n          }\n        ]\n      }\n      ...\n    ]\n  },\n  plugins: [\n    ...\n  ]\n}\n</code></pre>\n<ul>\n<li>这样当图片在10k以内的时候我们就会将其转为dataUrl的路径引入，并且将图片统一放到img文件夹下</li>\n<li>webpack还为我们提供了图片的压缩功能，方便缩小我们的项目体积，需要使用 image-webpack-loader 来进行配置，还是先下载该包 npm i image-webpack-loader -D</li>\n<li>然后在开发与生产都需要进行相关的配置，所以还是在 webpack.common.js 进行配置，配置如下</li>\n</ul>\n<pre><code class=\"language-js\">// webpack.common.js\n...\nmodule.exports = {\n  entry: {\n    ...\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.(jpg|png|gif|svg)$/,\n        use: [\n          {\n            loader: 'url-loader',\n            options: {\n              limit: 10000,\n              name: '[name]-[hash:5].[ext]',\n              outputPath: 'img/'\n            }\n          },\n          {\n            loader: 'image-webpack-loader',\n            options: {\n              mozjpeg: {\n                progressive: true,\n                quality: 65\n              },\n              optipng: {\n                enabled: false\n              },\n              pngquant: {\n                quality: [0.65, 0.9],\n                speed: 4\n              },\n              gifsicle: {\n                interlaced: false\n              },\n              webp: {\n                quality: 75\n              }\n            }\n          }\n        ]\n      }\n    ]\n  },\n  plugins: [\n    ...\n  ]\n}\n</code></pre>\n<ul>\n<li>上面就完成了开发中图片的相关配置，接下来配置一下字体库，还是使用url-loader，配置规则跟图片的一致，如下</li>\n</ul>\n<pre><code class=\"language-js\">...\nmodule.exports = {\n  entry: {\n    ...\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.(woff2?|eot|ttf|otf)(\\?.*)?$/,\n        use: [\n          {\n            loader: 'url-loader',\n            options: {\n              // 文件大小小于limit参数，url-loader将会把文件转为DataUR\n              limit: 10000,\n              name: '[name]-[hash:5].[ext]',\n              ourput: 'fonts/'\n            }\n          }\n        ],\n      },\n    ]\n  },\n  plugins: [\n    ...\n  ]\n}\n</code></pre>\n<ul>\n<li>如上就完成了咱们项目的前期配置，单纯使用react已经没有什么问题了，这一章的配置就到这吧，下面把各个配置文件都贴一下，当然也可以选择源码查看，地址是 <a href=\"https://github.com/mf950511/react-admin\">react-admin</a></li>\n<li>下一章我们进行typeScript的配置，之后就开始正式进行项目开发</li>\n</ul>\n<pre><code class=\"language-js\">// webpack.common.js\nconst path = require('path')\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\nconst { CleanWebpackPlugin } = require('clean-webpack-plugin')\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin')\nconst devMode = process.env.NODE_ENV === 'development'\nconsole.log(devMode)\nmodule.exports = {\n  entry: {\n    app: './index.js',\n    test: './index.jsx'\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.(jpg|png|gif|svg)$/,\n        use: [\n          {\n            loader: 'url-loader',\n            options: {\n              limit: 10000,\n              name: '[name]-[hash:5].[ext]',\n              outputPath: 'img/'\n            }\n          },\n          {\n            loader: 'image-webpack-loader',\n            options: {\n              mozjpeg: {\n                progressive: true,\n                quality: 65\n              },\n              optipng: {\n                enabled: false\n              },\n              pngquant: {\n                quality: [0.65, 0.9],\n                speed: 4\n              },\n              gifsicle: {\n                interlaced: false\n              },\n              webp: {\n                quality: 75\n              }\n            }\n          }\n        ]\n      },\n      {\n        test: /\\.(woff2?|eot|ttf|otf)(\\?.*)?$/,\n        use: [\n          {\n            loader: 'url-loader',\n            options: {\n              // 文件大小小于limit参数，url-loader将会把文件转为DataUR\n              limit: 10000,\n              name: '[name]-[hash:5].[ext]',\n              ourput: 'fonts/'\n            }\n          }\n        ],\n      },\n      {\n        test: /\\.(js)x?$/,\n        use: ['babel-loader'],\n        exclude: /node-modules/\n      }\n    ]\n  },\n  plugins: [\n    new MiniCssExtractPlugin({// 将css打包成单独的css文件\n      filename: devMode ? '[name].css' : '[name].[hash:5].css',\n      chunkFilename: devMode ? '[id].css' : '[id].[hash:5].css'\n    }),\n    new HtmlWebpackPlugin({\n      inject: true, // 所有js脚本放于body之后\n      hash: true, // 为静态资源生成hash，用于清楚缓存\n      cache: true, // 仅在文件被更改时发出文件\n      title: 'react admin',\n      filename: 'index.html',\n      template: path.resolve(__dirname, 'index.html'),\n      minify: {\n        collapseWhitespace: true, // 折叠空白\n        removeComments: true, // 删除注释\n        removeRedundantAttributes: true,\n        removeScriptTypeAttributes: true,\n        removeStyleLinkTypeAttributes: true\n      }\n    }),\n    new CleanWebpackPlugin(),\n  ],\n  optimization: { // 公共代码抽离\n    splitChunks:{ //启动代码分割，有默认配置项\n      chunks: 'all'\n    }\n  }\n}\n\n// webpack.dev.js\nconst path = require('path')\nconst webpack = require('webpack')\nconst merge = require('webpack-merge')\nconst common = require('./webpack.common.js')\n\nmodule.exports = merge(common, {\n  output: {\n    filename: '[name].js',\n    path: path.resolve(__dirname, 'dist'),\n    chunkFilename: '[name].bundle.js'\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.(le|c)ss$/,\n        use: [\n          'style-loader',\n          {\n            loader: 'css-loader',\n            options: {\n              sourceMap: true //是否打开样式查找\n            }\n          },\n          {\n            loader: 'postcss-loader', // 为浏览器加前缀\n            options: {\n              ident: 'postcss',\n              sourceMap: true,\n              plugins: loaders => [\n                require('autoprefixer')({\n                })\n              ]\n            }\n          },\n          {\n            loader: 'less-loader', // 解析样式文件\n            options: {\n              sourceMap: true\n            }\n          }\n        ]\n      }\n    ]\n  },\n  devtool: 'inline-source-map',\n  plugins: [\n    new webpack.HotModuleReplacementPlugin(),\n    new webpack.NamedModulesPlugin()\n  ],\n  devServer: {\n    contentBase: './dist', // 静态文件目录，用于浏览器显示\n    // clientLogLevel: 'warning',  // 输出日志级别\n    hot: true, // 启动热更新\n    publicPath: '/', // 浏览器访问路径\n    compress: true, // 启用gzip压缩\n    port: 8822,\n    open: true, // 自动调起浏览器\n    overlay: { // 出现错误或警告是否覆盖页面线上错误信息\n      warnings: true,\n      errors: true\n    },\n    quiet: true,\n    proxy: { // 代理\n    },\n    watchOptions: { // 监控文件相关配置\n      poll: true,\n      ignored: /node_modules/,\n      aggregateTimeout: 300  // 默认值, 当你连续改动时候, webpack可以设置构建延迟时间(防抖)\n    }\n  }\n})\n\n// webpack.prod.js\nconst path = require('path')\nconst TerserWebpackPlugin = require('terser-webpack-plugin')\nconst OptimizeCssAssetsWebpackPlugin = require('optimize-css-assets-webpack-plugin')\nconst merge = require('webpack-merge')\nconst common = require('./webpack.common.js')\nconst BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin;\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin')\n\nmodule.exports = merge(common, {\n  devtool: 'source-map',\n  output: {\n    filename: '[name].[chunkhash].js',\n    path: path.resolve(__dirname, 'dist'),\n    chunkFilename: '[name].bundle.js'\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.(le|c)ss$/,\n        use: [\n          MiniCssExtractPlugin.loader,\n          {\n            loader: 'css-loader',\n            options: {\n              sourceMap: true //是否打开样式查找\n            }\n          },\n          {\n            loader: 'postcss-loader', // 为浏览器加前缀\n            options: {\n              ident: 'postcss',\n              sourceMap: true,\n              plugins: loaders => [\n                require('autoprefixer')({\n                })\n              ]\n            }\n          },\n          {\n            loader: 'less-loader', // 解析样式文件\n            options: {\n              sourceMap: true\n            }\n          }\n        ]\n      }\n    ]\n  },\n  plugins: [\n    new BundleAnalyzerPlugin({\n      analyzerMode: 'server',\n      analyzerHost: '127.0.0.1',\n      analyzerPort: 7778,\n      reportFilename: 'report.html',\n      defaultSizes: 'parsed',\n      openAnalyzer: true,\n      generateStatsFile: false,\n      statsFilename: 'stats.json',\n      statsOptions: null,\n      logLevel: 'info'\n    }),\n  ],\n  optimization: {\n    minimizer: [\n      // js压缩\n      new TerserWebpackPlugin({\n        cache: true, // 启用文件缓存\n        parallel: true, // 多线程调用\n        sourceMap: true // 错误排查\n      }),\n      new OptimizeCssAssetsWebpackPlugin({}) // css压缩\n    ]\n  }\n})\n</code></pre>","frontmatter":{"title":"从零搭建一个react-hooks项目（二）","date":"2020-06-12","tags":["react","react hooks","redux","webpack"],"categories":"Webpack"},"fields":{"slug":"/react_md_2/"}}},"pageContext":{"slug":"/react_md_2/"}},"staticQueryHashes":["2566592090"]}