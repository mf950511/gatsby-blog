{"componentChunkName":"component---src-templates-blog-small-jsx","path":"/blog/quene/","result":{"data":{"markdownRemark":{"html":"<h1>队列</h1>\n<ul>\n<li>队列也是我们编程当中经常用到的一个数据结构，具有先入先出的特性，跟平时我们的排队一样，先进来先走</li>\n<li>同样，JavaScript并没有队列这个数据类型，所以需要我们自己来实现，因为队列同样具有顺序，且可以存入与去除，所以我们采用数组来做一个简单的实现</li>\n<li>首先定义一个队列类，因为只涉及到数据的存储，所以初始设置一个容器就可以</li>\n</ul>\n<pre><code class=\"language-js\">function Quene(){\n  this.dataStore = []\n}\n</code></pre>\n<ul>\n<li>上面就是一个队列的基本属性了，接下来就是队列拥有的方法，分别为入队，出队,获取队首元素，队尾元素，队列是否为空</li>\n</ul>\n<!--more-->\n<pre><code class=\"language-js\">Quene.prototype = {\n  enquene: function(data){\n    // 队列元素只能添加到队列最后面，所以我们直接使用数组push方法即可\n    this.dataStore.push(data)\n  },\n  dequene: function(){\n    // 队列元素出队是移除第一个元素，可以使用数组的shift方法移除数组的第一个元素\n    return this.dataStore.shift()\n  },\n  front: function(){\n    // 查询队首的元素\n    return this.dataStore[0]\n  },\n  back: function(){\n    // 查询队尾的元素\n    return this.dataStore[this.dataStore.length - 1]\n  },\n  isEmpty: function(){\n    return this.dataStore.length === 0 ? true : false\n  },\n  toString: function(){\n    // 用于遍历展示队列的元素\n    let str = ''\n    for(let i = 0; i &#x3C; this.dataStore.length; i++) {\n      str += '下一个是: ' + this.dataStore[i] + ' ,'\n    }\n    return str\n  }\n}\n</code></pre>\n<ul>\n<li>上面就是一个完整的数据类型队列的实现，我们可以拿来尝试一下队列的经典案例</li>\n</ul>\n<h2>队列实现舞池效果</h2>\n<ul>\n<li>舞池效果，舞池可供男女组队跳舞，但是男女的人数都不固定，所以需要一套匹配系统，当同时有男生女生排队时则播报入场男生名字与女方入场名字，若是只有男生或者女生，则播报男生或者女生的等待名称</li>\n<li>根据这个需求，我们需要确立一个舞者的类，具有性别与姓名的属性</li>\n</ul>\n<pre><code class=\"language-js\">// 舞者类\nfunction Dancer(name, sex){\n  this.name = name\n  this.sex = sex\n}\n\n// 跳舞者的文档资料，前面为性别，后面为名称\nlet dancers = `\nF A\nM B\nF C\nM D\nF E\nM F\nM G\n`\n// 用于存储男女舞者\nlet M = new Quene()\nlet F = new Quene()\n\nfunction initDancer(){\n  let dancerArr = dancers.split('\\n')\n  // 剔除空字符串\n  dancerArr = dancerArr.filter(item => {\n    if(item.trim()) {\n      return item.trim()\n    }\n  })\n  // 对所有舞者进行分组排列\n  dancerArr.forEach(item => {\n    let name = item.split(' ')[1], sex = item.split(' ')[0]\n    if(sex === 'F') {\n      F.enquene(new Dancer(name, sex))\n    } else {\n      M.enquene(new Dancer(name, sex))\n    }\n  })\n}\n\ninitDancer()\n\nfunction dancer(){\n  console.log('The dancer parters are \\n')\n  while(!M.isEmpty() &#x26;&#x26; !F.isEmpty()) {\n    console.log(`男方入场者为：${ M.dequene().name }，女方入场者为${ F.dequene().name }`)\n  }\n  if(!M.isEmpty()){\n    console.log(`男方等待区为：${ M.dequene().name }`)\n  }\n  if(!F.isEmpty()){\n    console.log(`女方等待区为: ${ F.dequene().name }`)\n  }\n}\n\ndancer()\n// The dancer parters are \n// 男方入场者为：B，女方入场者为A\n// 男方入场者为：D，女方入场者为C\n// 男方入场者为：F，女方入场者为E\n// 男方等待区为：G\n</code></pre>","frontmatter":{"title":"JavaScript中实现数据结构队列","date":"2020-01-02","tags":["JavaScript回顾","数据结构","进修"],"categories":"数据结构"},"fields":{"slug":"/quene/"}}},"pageContext":{"slug":"/quene/"}},"staticQueryHashes":["2566592090"]}