{"componentChunkName":"component---src-templates-blog-small-jsx","path":"/blog/react_md_6/","result":{"data":{"markdownRemark":{"html":"<h1>从零搭建一个react-hooks项目（六）</h1>\n<ul>\n<li>最近项目比较忙，所以有段时间没有补充新内容了，直到github提示有人给我提了issue才抽时间补了一下这个内容</li>\n<li>之前已经完成了webpack的搭建与优化，可以完成项目的基本使用，这位热心的伙伴也是提出了一些关于eslint的建议，所以这次补充一下ESLint的引入</li>\n<li>我们的项目使用了react与typescript，有typescript的存在看起来应该使用TSLint，但是官方提出以后会弃用TSLint，转而使用ESLint，声明也说了ESLint对TS的支持很完善，所以我们就引入一下ESLint</li>\n</ul>\n<h2>在项目中安装ESLint</h2>\n<ul>\n<li>首先安装ESLint与TS的相关依赖</li>\n</ul>\n<pre><code class=\"language-js\">// yarn add eslint @typescript-eslint/eslint-plugin @typescript-eslint/parser\nnpm install eslint @typescript-eslint/eslint-plugin @typescript-eslint/parser --save-dev\n</code></pre>\n<ul>\n<li>\n<p>然后在项目的根目录创建 .eslintrc.json 文件，然后补充下面选项进入</p>\n<!--more-->\n<pre><code class=\"language-js\">// .eslintrc.json\n{\n\"parser\": \"@typescript-eslint/parser\",\n\"parserOptions\": {\n\"jsx\": true,\n\"useJSXTextNode\": true\n},\n\"extends\": [\n\"plugin:@typescript-eslint/recommended\"\n],\n\"plugins\": [\"@typescript-eslint\"]\n}\n</code></pre>\n</li>\n<li>parser告诉ESLint使用typescript模式解析，parserOpions告诉ESLint我们想要使用jsx语法</li>\n<li>extends是表明我们想要使用ESLint中typescript的推荐语法</li>\n<li>plugins中是我们要用到的ESLint包含的详细typescript的解析规则</li>\n</ul>\n<h2>使用prettier</h2>\n<ul>\n<li>使用prettier就是告诉ESLint我们已经在本地校验过代码格式了，你可以不用关心代码的格式怎么样，下面是安装的依赖</li>\n</ul>\n<pre><code class=\"language-js\">// yarn add prettier eslint-config-prettier\nnpm install prettier eslint-config-prettier --save-dev\n</code></pre>\n<ul>\n<li>然后就需要在ESLint的配置规则中进行拓展，拓展之后能给我们更好看的代码格式校验，修改 .eslintrc.json 文件如下</li>\n</ul>\n<pre><code class=\"language-js\">{\n  \"parser\": \"@typescript-eslint/parser\",\n  \"parserOptions\": {\n    \"jsx\": true,\n    \"useJSXTextNode\": true\n  },\n  \"extends\": [\n    \"plugin:@typescript-eslint/recommended\",\n    \"prettier\",\n    \"prettier/@typescript-eslint\"\n  ],\n  \"plugins\": [\"@typescript-eslint\"]\n}\n</code></pre>\n<h2>使用VSCode优化编码体验</h2>\n<ul>\n<li>上面添加了基本的校验规则，但是不会在我们编码的时候主动为我们执行检查，所以我们可以通过配置VSCode插件来让编辑器实时为我们检查</li>\n<li>先在VSCode的插件库里搜索ESlint，然后安装并重启</li>\n<li>之后在 文件 -> 首选项 -> 设置中搜索 setting.json ，然后在 setting.json 最外层补充</li>\n</ul>\n<pre><code class=\"language-js\">// setting.json\n{\n  // otherSetting\n  \"eslint.validate\": [\n    \"javascript\",\n    \"javascriptreact\",\n    {\n        \"language\": \"typescript\",\n        \"autoFix\": true\n    },\n    {\n        \"language\": \"typescriptreact\",\n        \"autoFix\": true\n    }\n  ],\n}\n</code></pre>\n<ul>\n<li>之后再打开我们的代码就发现可以在每个页面提醒我们代码中的格式问题</li>\n</ul>\n<h2>配置hooks</h2>\n<ul>\n<li>因为我们的项目使用了hooks，所以我们需要添加hooks的解析规则帮助我们修复hooks编写中的问题</li>\n<li>首先安装相关的依赖</li>\n</ul>\n<pre><code class=\"language-js\">// yarn add eslint-plugin-react-hooks\nnpm install eslint-plugin-react-hooks --save-dev\n</code></pre>\n<ul>\n<li>然后在 .eslintrc.json 中补充相关的配置，配置如下</li>\n</ul>\n<pre><code class=\"language-js\">// .eslintrc.json\n{\n  \"parser\": \"@typescript-eslint/parser\",\n  \"parserOptions\": {\n    \"jsx\": true,\n    \"useJSXTextNode\": true\n  },\n  \"extends\": [\n    \"plugin:@typescript-eslint/recommended\",\n    \"prettier\",\n    \"prettier/@typescript-eslint\"\n  ],\n  \"plugins\": [\"@typescript-eslint\", \"react-hooks\"],\n  \"rules\": {\n    \"@typescript-eslint/explicit-function-return-type\": \"off\",\n    \"react-hooks/rules-of-hooks\": \"error\",\n    \"react-hooks/exhaustive-deps\": \"warn\"\n  }\n}\n</code></pre>\n<ul>\n<li>这样引入了hooks的校验之后就会帮我们提示一些类似于在非react组件中使用hooks语法这样的语法错误</li>\n<li>好了，上面就是引入代码规范ESLint的步骤了，有什么问题也可以私我啊</li>\n</ul>","frontmatter":{"title":"从零搭建一个react-hooks项目（六）","date":"2021-02-06","tags":["react","react hooks","redux","webpack","esLint"],"categories":"Webpack"},"fields":{"slug":"/react_md_6/"}}},"pageContext":{"slug":"/react_md_6/"}},"staticQueryHashes":["2566592090"]}