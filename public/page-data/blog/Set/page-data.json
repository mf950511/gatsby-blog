{"componentChunkName":"component---src-templates-blog-small-jsx","path":"/blog/Set/","result":{"data":{"markdownRemark":{"html":"<h1>Set与WeakSet</h1>\n<h2>Set</h2>\n<ul>\n<li>Set是ES6新增的集合类型，带来了集合数据结构</li>\n<li>创建方式为 new 关键字加 Set 构造函数</li>\n<li>可以通过在构造函数内传入可迭代对象来初始化该实例，如下</li>\n</ul>\n<pre><code class=\"language-js\">const s = new Set()\nconst s1 = new Set(['val1', 'val2', 'val3'])\nconst s2 = new Set({\n  [Symbol.iterator]: function*(){\n    yield 'val1'\n    yield 'val2'\n  }\n})\nconsole.log(s1) // {\"val1\", \"val2\", \"val3\"}\nconsole.log(s2) // {\"val1\", \"val2\"}\n</code></pre>\n<ul>\n<li>add()方法可以给Set添加新的键值对，has可以判断该Set是否有对应的值</li>\n<li>\n<p>size可以获取Set的元素数量，delete()用于删除元素，clear()用于清空元素，如下</p>\n<!--more-->\n<pre><code class=\"language-js\">const s3 = new Set()\nconsole.log(s3.has('first'))  // false\nconsole.log(s3.size)          // 0\n</code></pre>\n</li>\n</ul>\n<p>// add方法会返回它自身，所以可以连续add\ns3.\nadd('first').\nadd('last')\nconsole.log(s3.has('first'))  // true</p>\n<p>s3.delete('first')\nconsole.log(s3.has('first'))  // false<br>\nconsole.log(s3.has('last'))   // true\nconsole.log(s3.size)          // 1</p>\n<p>s3.clear()</p>\n<p>console.log(s3.has('last'))   // false\nconsole.log(s3.size)          // 0</p>\n<pre><code>- Set可以使用任何类型作为键，has使用严格相等来判定该值是否存在\n\n```js\nconst s4 = new Set()\nconst funcVal = function(){}\nconst objectVal = {}\nconst symbolVal = Symbol()\n\ns4.\nadd(funcVal).\nadd(objectVal).\nadd(symbolVal)\n\nconsole.log(s4.has(funcVal))    // true\nconsole.log(s4.has(objectVal))  // true\nconsole.log(s4.has(symbolVal))  // true\n\n// 全等判断，所以独立实例不冲突\nconsole.log(s4.has(function(){})) // false\n</code></pre>\n<ul>\n<li>全等判断，所以用作值的对象在自己的内容或属性变更时仍然保持不变</li>\n</ul>\n<pre><code class=\"language-js\">const s5 = new Set()\nconst objVal = {}\n\ns5.\nadd(objVal)\n\nobjVal.m2 = 'm2'\n\nconsole.log(s5.has(objVal))    // true\n</code></pre>\n<ul>\n<li>add()跟delete()是幂等的，delete()返回一个boolean，表示是否存在要删除的值</li>\n</ul>\n<pre><code class=\"language-js\">const s6 = new Set()\n\ns6.\nadd('foo')\nconsole.log(s6.size)  // 1\ns6.\nadd('foo')\nconsole.log(s6.size)  // 1\n\nconsole.log(s6.delete('foo'))    // true\nconsole.log(s6.delete('foo'))    // false\n</code></pre>\n<h2>Set顺序与迭代</h2>\n<ul>\n<li>Set维护值插入的顺序，所以是可迭代的，实例提供了一个迭代器，以插入顺序生成集合内容。</li>\n<li>通过values()方法及其别名keys()(或者Symbol.iterator属性（引用的就是values()）)获取迭代器</li>\n</ul>\n<pre><code class=\"language-js\">const s8 = new Set(['val1', 'val2', 'val3'])\nconsole.log(s8.values === s8[Symbol.iterator]) // true\nconsole.log(s8.keys === s8[Symbol.iterator]) // true\n\nfor(let value of s8[Symbol.iterator]()) {\n  console.log(value)\n}\n// 'val1'\n// 'val2'\n// 'val3'\n</code></pre>\n<ul>\n<li>values()是默认迭代器，所以可以对实例使用拓展操作</li>\n</ul>\n<pre><code class=\"language-js\">const s8 = new Set(['val1', 'val2', 'val3'])\n\nconsole.log([...s8]) // ['val1', 'val2', 'val3']\n</code></pre>\n<ul>\n<li>也可以不用迭代器，使用回调方法，用映射的forEach方法并传入回调，依次接受每个键/值对（键跟值都是值）。回调可接受可选的第二个参数，用于重写内部的this值</li>\n<li>forEach中的两个参数都是对应的值。</li>\n</ul>\n<pre><code class=\"language-js\">const s8 = new Set(['val1', 'val2', 'val3'])\n\ns8.forEach((val, key) => { console.log(`${ key } -> ${ val }`) })\n// val1 -> val1\n// val2 -> val2\n// val3 -> val3\n\ns8.forEach(function(val, key){ console.log(`${ key } -> ${ this.name } -> ${ val}`) }, { name: 's8' })\n// val1 -> s8 -> val1\n// val2 -> s8 -> val2\n// val3 -> s8 -> val3\n</code></pre>\n<h2>WeakSet</h2>\n<ul>\n<li>WeakSet 是 Set 的兄弟类型，API也是 Set 的自己，“weak”描述的时Javascrip垃圾回收程序对待“弱映射”中键的形式</li>\n<li>WeakMap中的键只能是Object或者继承自Object的类型，使用非对象设置键会抛出TypeError，值类型无限制</li>\n<li>初始化时只要有一个键无效就会抛错，其他的初始化全部失败</li>\n</ul>\n<pre><code class=\"language-js\">const key1 = { id: 1 }\n\nconst ws = new WeakSet([key1, 'BADKEY']) // Uncaught TypeError: Invalid value used in weak set\n\n// 要使用非对象的值可以使用构造函数包装再使用\nconst ws1 = new WeakSet([key1,new String('BADKEY')]) \n</code></pre>\n<ul>\n<li>其他的基本方法add、has、delete与Set保持一致</li>\n<li>“weak”表示键不属于正式引用，可以被回收，当键被回收后，键值对消失</li>\n</ul>\n<pre><code class=\"language-js\">const ws2 = new WeakSet()\nconst container = {\n  key:{}\n}\nws2.add(container.key)\nfunction removeReference(){\n  container.key = null\n}\nremoveReference()\n</code></pre>\n<ul>\n<li>上例中container对象维护着弱集合值的引用，所以不会被回收，但是要是执行了removeReference方法，那么值的引用就消失了，那么值就会消失</li>\n<li>WeakSet中的键值随时可能消失，所以没有迭代能力，也没有提供clear()清空的方法</li>\n<li>WeakSet之所以限制只能使用对象，是为了保证只有通过键对象的引用才能取到值。要是允许原始值就无法区分初始化时的字符串字面量跟初始化之后使用一个相同的字符串了</li>\n</ul>\n<h3>WeakSet的应用</h3>\n<ul>\n<li>WeakSet不会阻止垃圾回收，所以适合给对象打标签</li>\n</ul>\n<pre><code class=\"language-js\">const disabledElements = new Set()\nconst loginButton = document.querySelector('#login')\ndisabledElements.add(loginButton)\n</code></pre>\n<ul>\n<li>这样我们查询元素在不在disabledElements就可以知道是否被禁用了。不过上面的实现在登录按钮被DOM树删除了，但因为Set中存在着按钮的引用，垃圾回收不能回收它</li>\n</ul>\n<pre><code class=\"language-js\">const disabledElements = new WeakSet()\nconst loginButton = document.querySelector('#login')\ndisabledElements.add(loginButton)\n</code></pre>\n<ul>\n<li>使用WeakMap后当节点被删除后这里的引用也会消失，内存可直接被回收</li>\n</ul>","frontmatter":{"title":"Set与WeakSet","date":"2020-10-16","tags":["JavaScript回顾"],"categories":"JavaScript"},"fields":{"slug":"/Set/"}}},"pageContext":{"slug":"/Set/"}},"staticQueryHashes":["2566592090"]}