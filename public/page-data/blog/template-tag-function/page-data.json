{"componentChunkName":"component---src-templates-blog-small-jsx","path":"/blog/template-tag-function/","result":{"data":{"markdownRemark":{"html":"<h1>字符串模板标记函数</h1>\n<h2>字符串模板</h2>\n<ul>\n<li>ES6新增的字符串定义方式，可以通过 <code></code> 配合${} 来进行变量的嵌入，如下示例</li>\n</ul>\n<pre><code class=\"language-js\">let name = '张三'\nlet age = 24\n// 常规定义字符串的方式\nlet str = '我的名字叫' + name + ', 我今年' + age + '岁了'\n\n// 字符串模板定义\nlet str1 = `我的名字叫${ name },我今年${ age }岁了`\n\nconsole.log(str === str1) // true\n</code></pre>\n<!--more-->\n<h2>模板标记函数</h2>\n<ul>\n<li>模板标记函数的定义跟普通函数一致，但是在使用它之前要准备一个字符串模板，调用方式也跟常规的函数调用方法不同，不需要使用 functionName() 的形式调用，直接在函数名后面跟模板字符串即可，如下:</li>\n</ul>\n<pre><code class=\"language-js\">let a = 6\nlet b = 9\nlet sum = 15\nfunction tagTemplate(strings, aVariable, bVariable, sumVariable) {\n  console.log(strings)        // ['', ' + ', ' = ', '']\n  console.log(aVariable)      // 6\n  console.log(bVariable)      // 9\n  console.log(sumVariable)    // 15\n}\n\ntagTemplate`${a} + ${b} = ${sum}`\n\nlet c = '张三'\nlet d = 24\nfunction tagTemplate(strings, cVariable, dVariable, notVariable) {\n  console.log(strings)        // ['我叫', '，今年', '岁了']\n  console.log(cVariable)      // '张三'\n  console.log(dVariable)      // 24\n  console.log(notVariable)    // undefined\n}\n\ntagTemplate`我叫${c}，今年${d}岁了`\n</code></pre>\n<ul>\n<li>使用标记函数可以看到，参数里面的第一个参数是数组，是由字符串模板被插入变量分割之后剩余字符串组成的数组，之后的参数依次就是按顺序插入变量的值了</li>\n<li>知道参数的形式后我们就可以用ES6的结构对插入变量进行一个遍历了</li>\n</ul>\n<pre><code class=\"language-js\">let c = '张三'\nlet d = 24\nfunction tagTemplate(strings, ...variable) {\n  console.log(strings)        // ['我叫', '，今年', '岁了']\n  for(let i = 0; i &#x3C; variable.length; i++) {\n    console.log(variable[i])\n  }\n  // '张三'  24\n}\n\ntagTemplate`我叫${c}，今年${d}岁了`\n</code></pre>\n<h3>模板标记函数下的raw数组</h3>\n<ul>\n<li>采用模板标记函数后，第一个数组返回的是我们的非变量插入的字符串片段，这里的字符串片段是会转换成我们的实际展示形式的，比如 \\u00A9 会转为 ©，\\n 会转为一个空格</li>\n<li>如果我们想要拿到没有经过转换的原版字符串，这里我们就可以使用这个数组上的raw属性来获取原版字符串的数组，我们可以看下代码</li>\n</ul>\n<pre><code class=\"language-js\">function tagTest(strings, ...rest){\n  for(let value of strings) {\n    console.log(value)\n  }\n  for(let value of strings.raw) {\n    console.log(value)\n  }\n}\nlet a = '张三'\nlet b = 24\ntagTest`你${ a }\\u00A9,哈哈\\n${ b }我`\n// strings遍历\n// 你\n// ©,哈哈 \n// 我\n\n// strings.raw遍历\n// 你\n// \\u00A9,哈哈\\n\n// 我\n</code></pre>\n<ul>\n<li>这就是模板标记函数给我们提供的一些特性，其实归结起来就是插入变量的提取跟原始字符串的收集，方便我们的使用</li>\n</ul>\n<h2>String.raw</h2>\n<ul>\n<li>String.raw是ES6标准的一个字符串方法，使用方式类似于模板标记函数，后面直接跟一个模板字符串即可，会原样返回该模板字符串的值，不受可编译字符的影响，普通的字符串会返回经过转义的字符串结果，如下</li>\n</ul>\n<pre><code class=\"language-js\">console.log(`\\u00A9`)\n// ©\nconsole.log(String.raw`\\u00A9`)\n// \\u00A9\n\nconsole.log(`Hi\\n`)\n// Hi\nconsole.log(String.raw`Hi\\n`)\n// Hi\\n\n\nconsole.log(`Hi\n张三`)\n// Hi\n// 张三\nconsole.log(String.raw`Hi\n张三`)\n// Hi\n// 张三\n</code></pre>\n<ul>\n<li>它只对会被重新编译的字符串生效，实际的回车或者空格是不会被转义回去的</li>\n<li>其实我也没想好这玩意哪里能用到，既然看到了就记录一下</li>\n</ul>","frontmatter":{"title":"字符串模板标记函数","date":"2020-09-23","tags":["JavaScript回顾"],"categories":"JavaScript"},"fields":{"slug":"/template-tag-function/"}}},"pageContext":{"slug":"/template-tag-function/"}},"staticQueryHashes":["2566592090"]}