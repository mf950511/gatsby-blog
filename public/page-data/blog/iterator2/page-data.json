{"componentChunkName":"component---src-templates-blog-small-jsx","path":"/blog/iterator2/","result":{"data":{"markdownRemark":{"html":"<h1>迭代器</h1>\n<ul>\n<li>迭代器模式描述了一个方案，将某些结构称为“可迭代对象”，因为它们都实现了正式的Iterable接口，而且可以通过迭代器Iterator消费</li>\n<li>可迭代对象：数组或集合这样的集合类型的对象。特点：包含元素有限，具有无歧义的遍历顺序</li>\n<li>任何实现Iterable接口的数据结构都可以被实现Iterator接口的结构“消费”</li>\n<li>迭代器是按需生成的一次性对象。每个迭代器都会关联一个可迭代对象，迭代器暴露了与之关联的可迭代对象的api</li>\n<li>迭代器不关心与它关联的可迭代对象数据结构，只关心如何取得连续的值</li>\n</ul>\n<h2>可迭代协议</h2>\n<ul>\n<li>实现Iterable(可迭代协议)要求两种能力：支持迭代的自我识别能力与创建实现Iterator接口的对象的能力。</li>\n<li>ECMAScript中暴露一个属性值作为“默认迭代器”，而且该属性用特殊的Symbol.iterator作为键。</li>\n<li>这个默认迭代器必须引用一个迭代器工厂函数，调用工厂函数必须返回一个新迭代器</li>\n<li>\n<p>实现Iteratable的内置类型</p>\n<ul>\n<li>字符串</li>\n<li>数组</li>\n<li>映射</li>\n<li>集合</li>\n<li>arguments对象</li>\n<li>NodeList等DOM集合</li>\n</ul>\n</li>\n<li>可以通过检查是否存在默认迭代器属性来暴露工厂函数</li>\n<li>\n<p>调用工厂函数可以生成一个迭代器</p>\n<!--more-->\n<pre><code class=\"language-js\">let num = 1\nlet str = 'abc'\nlet arr = [1, 2, 3]\nconsole.log(num[Symbol.iterator]) // undefined\nconsole.log(str[Symbol.iterator]) // [Symbol.iterator]() { [native code] }\nconsole.log(arr[Symbol.iterator]) // values() { [native code] }\n</code></pre>\n</li>\n</ul>\n<p>console.log(str<a href=\"\">Symbol.iterator</a>) // StringIterator {}\nconsole.log(arr<a href=\"\">Symbol.iterator</a>) // Array Iterator {}</p>\n<pre><code>- 实际代码中不需要显式调用工厂函数来生成迭代器。实现可迭代协议的所有类型会自动兼容接收可迭代对象的任何语言特性。\n- 接收可迭代对象的原生语言特性有：\n  - for-of循环\n  - 数组解构\n  - 拓展操作符\n  - Array.from()\n  - 创建集合\n  - 创建映射\n  - Promise.all()接收由期约组成的可迭代对象\n  - Promise.race()接收由期约组成的可迭代对象\n  - yield* 操作符，在生成器中使用\n- 这些语言结构会在后台调用提供的可迭代对象的工厂函数，从而创建迭代器\n\n```js\nlet arr = ['a', 'b', 'c']\nfor(let el of arr) {\n  console.log(el) // a, b, c\n}\n\nlet [a, b, c] = arr\nconsole.log(a, b, c) // a, b, c\n\nlet arr2 = [...arr]\nconsole.log(arr2) // [\"a\", \"b\", \"c\"]\n\nlet arr3 = Array.from(arr)\nconsole.log(arr3) // [\"a\", \"b\", \"c\"]\n\nlet set = new Set(arr)\nconsole.log(set) // Set(3) {\"a\", \"b\", \"c\"}\n\nlet pairs = arr.map((x, i) => [x, i])\nlet map = new Map(pairs)\nconsole.log(map) // Map(3) {\"a\" => 0, \"b\" => 1, \"c\" => 2}\n</code></pre>\n<h2>迭代器协议</h2>\n<ul>\n<li>迭代器是一次性使用的对象，用于迭代与其关联的可迭代对象。</li>\n<li>迭代器api使用next()方法可以遍历迭代器中的数据。</li>\n<li>每次调用next都会返回一个IteratorResult对象，其中包含迭代器返回的下一个值</li>\n<li>不调用next无法知道迭代器的当前位置</li>\n<li>IteratorResult包含两个属性，done跟value，done为布尔值，表示是否可以调用next获取下一个值，value包含可迭代对象的下一个值（done为false），或者undefined（done为true）</li>\n</ul>\n<pre><code class=\"language-js\">// 可迭代对象\nlet arr = ['foo', 'bar']\n\n// 迭代器工厂函数\nconsole.log(arr[Symbol.iterator]) // ƒ values() { [native code] }\n\n// 迭代器\nlet iter = arr[Symbol.iterator]() // Array Iterator {}\n\n// 执行迭代\nconsole.log(iter.next()) // {value: \"foo\", done: false}\nconsole.log(iter.next()) // {value: \"bar\", done: false}\nconsole.log(iter.next()) // {value: undefined, done: true}\nconsole.log(iter.next()) // {value: undefined, done: true}\n</code></pre>\n<ul>\n<li>迭代器并不知道怎么从可迭代对象取下一个值，也不知道可迭代对象多大，只要迭代器到达done:true的状态，后续调用netx()就一直返回同样的值</li>\n<li>每个迭代器都表示对可迭代对象的一次遍历，不同迭代器实例没有联系，只会独立的遍历</li>\n</ul>\n<pre><code class=\"language-js\">let arr2 = ['foo', 'bar']\nlet iter1 = arr2[Symbol.iterator]()\nlet iter2 = arr2[Symbol.iterator]()\n\nconsole.log(iter1.next()) // {value: \"foo\", done: false}\nconsole.log(iter2.next()) // {value: \"foo\", done: false}\nconsole.log(iter1.next()) // {value: \"bar\", done: false}\nconsole.log(iter2.next()) // {value: \"bar\", done: false}\n</code></pre>\n<ul>\n<li>迭代器不会与可迭代对象的某个时刻绑定，而是记录遍历可迭代对象的过程，如果遍历中可迭代对象变了，那迭代器会反应相应的变化</li>\n</ul>\n<pre><code class=\"language-js\">let arr = ['foo', 'bar']\nlet iter = arr[Symbol.iterator]() // Array Iterator {}\nconsole.log(iter.next()) // {value: \"foo\", done: false}\narr.splice(1, 0, 'baz')\nconsole.log(iter.next()) // {value: \"baz\", done: false}\nconsole.log(iter.next()) // {value: \"bar\", done: false}\nconsole.log(iter.next()) // {value: undefined, done: true}\n</code></pre>\n<ul>\n<li>迭代器维护着可迭代对象的引用，所以迭代器会阻止垃圾回收程序回收可迭代对象</li>\n</ul>\n<h2>自定义迭代器</h2>\n<ul>\n<li>与Iterable接口类似，实现了Iterator接口的对象都可以作为迭代器使用。</li>\n</ul>\n<pre><code class=\"language-js\">class Counter{\n  constructor(limit){\n    this.count = 1\n    this.limit = limit\n  }\n  next(){\n    if(this.count &#x3C;= this.limit) {\n      return {\n        done: false,\n        value: this.count++\n      }\n    } else {\n      return {\n        done: true,\n        value: undefined\n      }\n    }\n  }\n  [Symbol.iterator](){\n    return this\n  }\n}\n\nlet counter = new Counter(3)\nfor(let i of counter) {\n  console.log(i) // 1, 2, 3\n}\n\nfor(let i of counter) {\n  console.log(i) // 没有值\n}\n</code></pre>\n<ul>\n<li>这样实现了Iterator接口，但是每个实例只能被迭代一次，所以我们把计数器变量放到闭包中</li>\n</ul>\n<pre><code class=\"language-js\">class Counter{\n  constructor(limit) {\n    this.limit = limit\n  }\n\n  [Symbol.iterator](){\n    let count = 1,limit = this.limit\n    return {\n      next(){\n        if(count &#x3C;= limit) {\n          return {\n            done: false,\n            value: count++\n          }\n        } else {\n          return {\n            done: true,\n            value: undefined\n          }\n        }\n      }\n    }\n  }\n}\n\nlet counter = new Counter(3)\nfor(let i of counter) {\n  console.log(i) // 1, 2, 3\n}\n\nfor(let i of counter) {\n  console.log(i) // 1, 2, 3\n}\n</code></pre>\n<ul>\n<li>每个以这种方式创建的迭代器都实现了Iterator接口。Symbol.iterator属性引用的工厂函数会返回相同的迭代器</li>\n<li>因为每个迭代器也实现了Iterable接口，所以可以再任何期待可迭代对象的地方使用，比如for-of循环</li>\n</ul>\n<pre><code class=\"language-js\">let arr = [3, 1, 4]\nlet iter = arr[Symbol.iterator]()\nfor(let item of arr) {\n  console.log(item) // 3, 1, 4\n}\n\nfor(let item of iter) {\n  console.log(item) // 3, 1, 4\n}\n</code></pre>\n<h2>提前终止迭代器</h2>\n<ul>\n<li>\n<p>可选的return方法用于指定在迭代器提前关闭时执行的逻辑。执行迭代的结构在想让迭代器知道它不想遍历到可迭代对象耗尽时，可以关闭迭代器。情况有：</p>\n<ul>\n<li>for-of循环通过break、continue、return、或者throw提前退出</li>\n<li>结构操作并未消费所有值</li>\n</ul>\n</li>\n<li>return方法必须返回一个幼小的IteratorResult对象，可以只返回{done: true}</li>\n<li>下面代码所示，内置语言结构发现还有值可以迭代，但不会消费这些值时，会自动调用return</li>\n</ul>\n<pre><code class=\"language-js\">class Counter{\n  constructor(limit) {\n    this.limit = limit\n  }\n\n  [Symbol.iterator](){\n    let count = 1,limit = this.limit\n    return {\n      next(){\n        if(count &#x3C;= limit) {\n          return {\n            done: false,\n            value: count++\n          }\n        } else {\n          return {\n            done: true,\n            value: undefined\n          }\n        }\n      },\n      return (){\n        console.log('exit early')\n        return { done: true }\n      }\n    }\n  }\n}\n\nlet counter1 = new Counter(5)\nfor(let i of counter1) {\n  if(i > 2) {\n    break\n  }\n  console.log(i)\n}\n// 1\n// 2\n// exit early\n\nlet counter2 = new Counter(5)\ntry {\n  for(let i of counter1) {\n    if(i > 2) {\n      throw 'err'\n    }\n    console.log(i)\n  }\n} catch(e) {}\n// 1\n// 2\n// exit early\n\nlet counter3 = new Counter(5)\nlet [a, b] = counter3\n// exit early\n</code></pre>\n<ul>\n<li>如果迭代器没有关闭，就可以从上次离开的地方继续迭代，比如数组的迭代不可关闭</li>\n</ul>\n<pre><code class=\"language-js\">let arr3 = [1, 2, 3, 4, 5]\nlet iter1 = arr3[Symbol.iterator]()\nfor(let i of iter1) {\n  console.log(i)\n  if(i > 2) {\n    break\n  }\n}\n// 1\n// 2\n// 3\n\n\nfor(let i of iter1) {\n  console.log(i)\n}\n// 4\n// 5\n</code></pre>\n<ul>\n<li>return方法是可选的，所以并非所有迭代都可以关闭，可以通过测试迭代器的return属性是不是方法确定是否可关闭。</li>\n<li>仅仅给给不可关闭的迭代器加return方法并不能使其变成可关闭的。这是因为调用return并不会强制迭代器进入关闭状态。但是return方法仍然会调用</li>\n</ul>\n<pre><code class=\"language-js\">let arr4 = [1, 2, 3, 4, 5]\nlet iter4 = arr4[Symbol.iterator]()\niter4.return = function(){\n  console.log('exit early')\n  return { done: true }\n}\n\nfor(let i of iter4) {\n  console.log(i)\n  if(i > 2) {\n    break\n  }\n}\n// 1\n// 2\n// 3\n// exit early\n\n\nfor(let i of iter4) {\n  console.log(i)\n}\n// 4\n// 5\n</code></pre>\n<h2>小结</h2>\n<ul>\n<li>迭代器是一个由任意对象实现的接口，支持连续获取对象产出的每一个值。任何实现Iterable接口的对象都有一个Symbol.iterator属性，这个属性引用默认迭代器。默认迭代器就像一个迭代器工厂，也就是一个函数，调用之后会产生一个实现Iterator接口的对象</li>\n<li>迭代器必须通过next方法才能连续取到值，这个方法返回IteratorObject。包含一个done属性跟value属性。这个借口可以通过手动反复调用next消费，也可以通过for-of这样的原生消费者消费</li>\n</ul>","frontmatter":{"title":"再读迭代器","date":"2020-10-22","tags":["JavaScript回顾"],"categories":"JavaScript"},"fields":{"slug":"/iterator2/"}}},"pageContext":{"slug":"/iterator2/"}},"staticQueryHashes":["2566592090"]}