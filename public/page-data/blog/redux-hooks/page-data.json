{"componentChunkName":"component---src-templates-blog-small-jsx","path":"/blog/redux-hooks/","result":{"data":{"markdownRemark":{"html":"<h1>react hooks 下使用redux</h1>\n<h2>redux</h2>\n<ul>\n<li>redux是近年来javascript中火热的状态管理容器，提供可预测的全局状态管理。在大型的应用中我们常采用redux来进行状态管理，redux的基本使用方式如下</li>\n<li>使用redux，我们先要进行action的编写，action一般由type与其他相关数据构成，下面就是简单的两个action</li>\n</ul>\n<pre><code class=\"language-js\">const INCREMENT = 'INCREMENT'\nconst DECREMENT = 'DECREMENT'\n\n// 数字增加action\n{ type: INCREMENT, payload: number }\n\n// 数字减少action\n{ type: DECREMENT, payload: number }\n</code></pre>\n<!--more-->\n<ul>\n<li>接下来，我们就要根据action来进行我们的reducer编写,reducer是一个函数，具有两个初始值，一个是当前的状态值state，一个是当前的操作模式action</li>\n<li>我们要根据当前的操作模式进行相应的逻辑处理，并返回新的state,这里我们为state设置一个初始值 0，对应INCREMENT与DECREMENT分别进行加减操作</li>\n</ul>\n<pre><code class=\"language-js\">const initialState = 0\n\nconst numberReducer = (state = initialState, action) => {\n  switch(action.type) {\n    case INCREMENT:\n      return state + action.payload\n    case DECREMENT:\n      return state - action.payload\n    default:\n      return state\n  }\n}\n</code></pre>\n<ul>\n<li>上面只是定义了操作形式与如何响应该操作，并没有实际的进行触发，触发状态改变需要redux提供的dispatch,dispatch接收一个action并将这个action传递给reducer，从而触发最后的状态改变，如下</li>\n</ul>\n<pre><code class=\"language-js\">dispatch({ type: DECREMENT, payload: number })\n</code></pre>\n<h2>react中使用redux</h2>\n<ul>\n<li>react hooks出来之前，redux几乎是所有react项目的不二只选，但是其复杂的使用方式让许多开发者都头疼，对萌新来说更是要命，上网查了都不知道是怎么回事</li>\n<li>hooks的出现，解放了一大批的react的开发者，易上手的开发模式让开发者使用极其简单，而react-redux自然也不会放过hooks的这波狂潮，下面就让我们对比一下hooks前后的两种redux使用形式</li>\n</ul>\n<h3>react中使用redux</h3>\n<ul>\n<li>react中使用redux需要借助三方库react-redux，react-redux提供了connect来让我们在组件中使用redux，如下使用</li>\n</ul>\n<pre><code class=\"language-js\">import React from 'react'\nimport { connect } from 'react-redux'\n\nclass Test extends React.Component {\n  constructor(){\n    super()\n  }\n  mapStateToProps(state) {\n    return {\n      number: state.number\n    }\n  }\n\n  mapDispatchToProps(dispatch) {\n    return {\n      increment: (number) => dispatch({ type: 'INCREMENT', payload: number }),\n      decrement: (number) => dispatch({ type: 'DECREMMENT', payload: number }),\n    }\n  }\n\n  render() {\n    return (\n      &#x3C;div>\n        &#x3C;div>{ this.props.number }&#x3C;/div>\n        &#x3C;button onClick={() => { this.props.increment(10) }}>增加10&#x3C;/button>\n        &#x3C;button onClick={() => { this.props.decrement(5) }}>减少5&#x3C;/button>\n      &#x3C;/div>\n    )\n  }\n\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Test)\n</code></pre>\n<h2>react hooks中使用redux</h2>\n<ul>\n<li>hooks中使用redux需要依靠react-redux提供的 useSelector 与 useDispatch进行state取值与dispatch执行修改操作</li>\n<li>useSelector会根据接受的函数返回需要的状态值，如下面的number</li>\n<li>useDispatch会返回一个操作函数，返回的操作函数可以接收一个action执行状态值的修改</li>\n</ul>\n<pre><code class=\"language-js\">import * as React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\nconst Test = () => {\n  const number = useSelector(state => state.number)\n  const dispatch = useDispatch()\n  return (\n      &#x3C;div>\n        &#x3C;div>{ this.props.number }&#x3C;/div>\n        &#x3C;button onClick={() => { dispatch({ type: 'INCREMENT', payload: 10 }) }}>增加10&#x3C;/button>\n        &#x3C;button onClick={() => { dispatch({ type: 'DECREMMENT', payload: 5 }) }}>减少5&#x3C;/button>\n      &#x3C;/div>\n    )\n}\n\nexport default Test\n</code></pre>","frontmatter":{"title":"react hooks下使用react-redux","date":"2020-06-11","tags":["react","react hooks","redux"],"categories":"React"},"fields":{"slug":"/redux-hooks/"}}},"pageContext":{"slug":"/redux-hooks/"}},"staticQueryHashes":["2566592090"]}