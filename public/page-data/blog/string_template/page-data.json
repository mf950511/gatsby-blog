{"componentChunkName":"component---src-templates-blog-small-jsx","path":"/blog/string_template/","result":{"data":{"markdownRemark":{"html":"<h1>字符串模板的实现</h1>\n<ul>\n<li>字符串模板是针对大批量、多频率操作dom的解决方案，比如我们要根据数据动态创建一个多嵌套的元素并将其插入到页面中，如果我们采用常规创建dom元素的方式进行插，代码量会极其庞大，下面就是常规方式实现的功能</li>\n</ul>\n<!--more-->\n<pre><code class=\"language-js\">// 源数据\nlet data = {\n  data: {\n    li: [\n      {\n        span: '我是span',\n        strong: '我是strong'\n      },\n      {\n        span: '我是span',\n        strong: '我是strong'\n      },\n      {\n        span: '我是span',\n        strong: '我是strong'\n      }\n    ],\n    h2: '我是第二标题',\n    p: '我是p标签'\n  },\n  id: 'containter',\n}\n\nfunction createDom(data){\n  let div = document.createElement('div')\n  div.id = data.id\n  let ul = document.createElement('ul')\n  let p = document.createElement('p')\n  let pt = document.createTextNode(data.data.p)\n  let h2 = document.createElement('h2')\n  let ph = document.createTextNode(data.data.h2)\n  p.appendChild(pt)\n  h2.appendChild(ph)\n  let liData = data.data.li\n  for(let i = 0, len = liData.length; i &#x3C; len; i++) {\n    let li = document.createElement('li')\n    let span = document.createElement('span')\n    let strong = document.createElement('strong')\n    let t = document.createTextNode(liData[i].strong)\n    let p = document.createTextNode(liData[i].span)\n    span.appendChild(p)\n    strong.appendChild(t)\n    li.appendChild(span)\n    li.appendChild(strong)\n    ul.appendChild(li)\n  }\n\n  div.appendChild(ul)\n  div.appendChild(p)\n  div.appendChild(h2)\n  document.body.appendChild(div)\n}\n</code></pre>\n<ul>\n<li>上面的方式可以看到在大批量的创造dom，然后不停地嵌套添加，代码量大，并且效率低下</li>\n<li>所以这里我们提供了一个模板字符串的函数来生成这个模板并最后插入到页面中，首先我们要提供一个字符串替换的一个函数用来将数据替换到页面中</li>\n</ul>\n<pre><code class=\"language-js\">// 替换字符串模板中的数据\nfunction formatString(str, data){\n  return str.replace(/\\{\\{(\\w+)\\}\\}/g, function(all, key){\n    return data[key]\n  })\n}\n</code></pre>\n<ul>\n<li>然后根据数据结构创建我们的模板字符串与生成模板字符串的函数</li>\n</ul>\n<pre><code class=\"language-js\">// 生成数据的函数\nfunction createStrTemplate(data){\n  let div = document.createElement('div')\n  div.id = data.id\n  // 获取li遍历的数据\n  let liData = data.data.li\n  let ulStr = ''\n  // 根元素div的子元素模板\n  let divStr = [\n    '&#x3C;p>{{p}}&#x3C;/p>',\n    '&#x3C;h2>{{h2}}&#x3C;/h2>',\n    '&#x3C;ul>{{ul}}&#x3C;/ul>'\n  ].join('')\n  // li的模板\n  let liStr = [\n    '&#x3C;li>',\n    '&#x3C;span>{{span}}&#x3C;/span>',\n    '&#x3C;strong>{{strong}}&#x3C;/strong>',\n    '&#x3C;/li>'\n  ].join('')\n  for(let i = 0, len = liData.length; i &#x3C; len; i++) {\n    // 遍历li数组生成li元素并将内里的数据进行填充\n    ulStr += formatString(liStr, liData[i])\n  }\n  // 将填充好的字符串作为ul的源数据进行赋值\n  data.data.ul = ulStr\n  // 对div模板内的数据进行替换，并作为html内容进行赋值\n  let divStrTemplate = formatString(divStr, data.data)\n  div.innerHTML = divStrTemplate\n  document.body.appendChild(div)\n}\n\ncreateStrTemplate(data)\n</code></pre>\n<ul>\n<li>这样便实现了我们的模板字符串函数，只操作了一次dom创建与一次添加便完成了功能，能极大地提升我们的执行效率</li>\n<li>上面得代码可以看到创建的模板字符串都是同名标签加同名变量，我们可以对其进行进一步的处理</li>\n<li>构造一个生产标签加变量的函数</li>\n</ul>\n<pre><code class=\"language-js\">// 此函数可以接收字符串或者数组来生产对应的标签加变量\nfunction view(name){\n  if(Object.prototype.toString.call(name) === '[object Array]') {\n    let str = ''\n    for(let i = 0, len = name.length; i &#x3C; len; i++) {\n      str += view(name[i])\n    }\n    return str\n  } else {\n    return `&#x3C;${name}>{{${name}}}&#x3C;/${name}>`\n  }\n}\n</code></pre>\n<ul>\n<li>有了这个函数之后我们就可以对上面得代码进行进一步的优化</li>\n</ul>\n<pre><code class=\"language-js\">function createStringTemplate(data){\n  let div = document.createElement('div')\n  div.id = data.id\n  // 生成div子元素模板\n  let divStr = view(['p', 'h2', 'ul'])\n  let ulStr = ''\n  let liData = data.data.li\n  // 这一句先是生成了li子元素的模板，生成了li模板，然后又将li子元素模板作为模板数据填充进li中\n  let liTpl = formatString(view('li'), {li: view(['span', 'strong'])})\n  for(let i = 0, len = liData.length; i &#x3C; len; i++) {\n    // 遍历li数组生成li元素并将内里的数据进行填充\n    ulStr += formatString(liTpl, liData[i])\n  }\n  data.data.ul = ulStr\n  // 对div模板内的数据进行替换，并作为html内容进行赋值\n  let divStrTemplate = formatString(divStr, data.data)\n  div.innerHTML = divStrTemplate\n  document.body.appendChild(div)\n}\n\ncreateStringTemplate(data)\n</code></pre>\n<ul>\n<li>以上便是我们最终版的利用模板字符串替换频繁的dom操作，极大程度的提升我们的执行效率</li>\n</ul>","frontmatter":{"title":"字符串模板的实现","date":"2019-11-01","tags":["JavaScript回顾","设计模式","进修"],"categories":"JavaScript"},"fields":{"slug":"/string_template/"}}},"pageContext":{"slug":"/string_template/"}},"staticQueryHashes":["2566592090"]}