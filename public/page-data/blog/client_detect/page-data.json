{"componentChunkName":"component---src-templates-blog-small-jsx","path":"/blog/client_detect/","result":{"data":{"markdownRemark":{"html":"<h1>客户端检测</h1>\n<ul>\n<li>客户端在Web开发中是绕不过的话题，浏览器之间的差异与奇异行为，让我们必须使用客户端检测来进行补救，常见的补救方式为先设计最常用的方案，然后针对其他浏览器进行补救</li>\n</ul>\n<h2>能力检测</h2>\n<ul>\n<li>能力检测基于JavaScript测试浏览器是否支持某种特性，不需要知道浏览器的信息，只需要知道这种能力浏览器是否存在即可，常见的IE5之前没有document.getElementById()方法，但可以通过document.all属性实现同样的功能</li>\n</ul>\n<pre><code class=\"language-js\">function getElement(id){\n    if(document.getElementById){\n        return document.getElementById(id)\n    } else if(document.all) {\n        return document.all[id]\n    } else {\n        throw new Error('No way to retrive element')\n    }\n}\n</code></pre>\n<ul>\n<li>能力检测最有效的就是检测属性不仅存在，还要能够有预期的表现，以确定一个对象是否可以排序时</li>\n</ul>\n<pre><code class=\"language-js\">// 错误形式\nfunction isSortable(object) {\n    return !!object.sort\n}\nisSortable({ sort: true })\n\n// 正确形式\nfunction isSortable(object){\n    return typeof object.sort === 'function'\n}\n</code></pre>\n<!--more-->\n<ul>\n<li>恰当的使用能力检测可以分析运行代码的浏览器，一般将这些按照能力归类浏览器的操作集中进行，不用等到执行代码在检测</li>\n</ul>\n<pre><code class=\"language-js\">// 浏览器是否支持Netscape式的插件\nlet hasNSPugins = !!(navigator.plugins &#x26;&#x26; navigator.plugins.length)\n// 是否具有DOM Level 1 能力\nlet hasDom1 = !!(document.getElementById &#x26;&#x26; document.createElenment &#x26;&#x26; document.getElementByTagName)\n</code></pre>\n<ul>\n<li>下面是根据浏览器独特行为判断浏览器身份的方法</li>\n</ul>\n<pre><code class=\"language-js\">class BrowserDetector {\n    constructor(){\n        // IE6 - IE 10\n        this.isIE_Gte6Lte10 = /*@cc_on!@*/false\n        // IE7 - 11支持\n        this.isIEGte7Lte11 = !!document.documentMode\n        // Edge 20及以上\n        this.isEdge_Gte20 = !!window.StyleMedia\n        // 所有Firefox\n        this.isFirefox_Gte1 = typeof InstanllTrigger !== 'undefined'\n        // chrome对象\n        this.isChrome_Gte1 = !!window.chrome &#x26;&#x26; !!window.chrome.webstore\n        // safari 3-9.1\n        this.isSafari_Gte3Lte9_1 = /constructor/i.test(window.Element)\n        // safari 7.1及以上\n        this.isSafari_Gte7_1 = (({ pushNotification = {} } = {}) => pushNotification.toString() == '[object SafariRemoteNotification]')(window.safari)\n        // opera 20及以上\n        this.isOpera_Gte20 = !!window.opr &#x26;&#x26; !!window.opr.addons\n    }\n\n    isIE(){\n        return this.isIE_Gte6Lte10 || this.isIEGte7Lte11\n    }\n    isEdge(){\n        return this.isEdge_Gte20 &#x26;&#x26; !this.isIE()\n    }\n    isFirefox(){\n        return this.isFirefox_Gte1\n    }\n    isChrome(){\n        return this.isChrome_Gte1\n    }\n    isSafari(){\n        return this.isSafari_Gte3Lte9_1 || this.isSafari_Gte7_1\n    }\n    isOpera(){\n        return this.isOpera_Gte20\n    }\n}\n</code></pre>\n<h2>用户代理检测</h2>\n<ul>\n<li>用户代理检测可以通过浏览器的用户代理字符串确定使用的浏览器。用户代理字符串包含在每个http请求头的头部，JavaScript中可以通过navigator.useAgent访问。在服务器端，浏览器通过用户代理字符串确定浏览器并执行操作。</li>\n<li>但在客户端，用户代理字符串都被认为不可靠，因为很长一段时间，浏览器都通过用户代理字符串包含错误或诱导信息欺骗服务器</li>\n<li>http规范（1.0和1.1）要求浏览器要向服务器发送包含浏览器名称和版本信息的简短字符串。一般要求用户代理字符串应该以“标记/版本”形式的产品列表</li>\n<li>为分析代码运行在什么浏览器下，开发者一般会用window.navigator.userAgent返回的字符串值来分析。</li>\n<li>相比于能力检测，用户代理检测的优势在于：能力检测可以保证脚本不必理会浏览器而正常执行。现代浏览器用户代理字符串的过去、现在和未来都是有章可循的，可以准确识别。</li>\n</ul>\n<h2>伪造用户代理</h2>\n<ul>\n<li>通过检测用户代理来识别浏览器并不是完美的方式，因为它可以造假。不过所有实现window.navigator对象的浏览器都提供userAgent只读属性，简单的给它设置其他值不会生效。</li>\n<li>但是有很多简单的方法可以绕过这个限制，有些浏览器提供了<strong>defineGetter</strong>方法，利用它可以篡改用户代理字符串</li>\n</ul>\n<pre><code class=\"language-js\">console.log(window.navigator.userAgent)\n\nwindow.navigator.__defineGetter__('userAgent', () => 'foo')\nconsole.log(window.navigator.userAgent)\n</code></pre>\n<ul>\n<li>所以如果我们相信浏览器返回的用户代理字符串，那就可以用来判断浏览器。如果怀疑脚本或浏览器修改，那还是使用能力检测</li>\n</ul>","frontmatter":{"title":"客户端检测--高程4","date":"2020-12-28","tags":["JavaScript回顾"],"categories":"JavaScript"},"fields":{"slug":"/client_detect/"}}},"pageContext":{"slug":"/client_detect/"}},"staticQueryHashes":["2566592090"]}