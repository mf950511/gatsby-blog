{"componentChunkName":"component---src-templates-blog-small-jsx","path":"/blog/react_hooks/","result":{"data":{"markdownRemark":{"html":"<h1>react hooks下封装通用redux</h1>\n<p>redux我们常用来做全局状态管理，一般我们都会按功能模块来新建相关的action，reducer然后再使用combineReducers来将其组合导出，这样的话就实现了模块的划分，让我们更方便项目的管理。但是在某些情况下，我们想要一个通用的redux管理，比如一些特别小，但是又必须要用到的场景，比如我们现在新建了一个chat模块用来管理聊天相关的redux，新建了一个menu模块来管理我们的菜单模块，新建了一个number模块用来管理我们的数据状态，但是这时候我想要对顶部导航栏的显示与隐藏添加一个reducer用来与其他组件交互，这种情况下还要单独再开一个nav模块吗？肯定是不愿意的，所以针对我们这些比较小的功能模块，我们想封装一个通用的reducer，这个通用的reducer共享一个normal数据，dispatch时接受一组数据key,value用于进行数据的改变，下面就是我们的封装过程</p>\n<!--more-->\n<ul>\n<li>首先我们需要创建一个normalReducer，如下</li>\n</ul>\n<pre><code class=\"language-js\">// store/normal/reducer.js\n\nexport const normalReducer = (state = {}, action) => {\n  if(action.type === 'normal') { // 用于标识走通用的reducer\n    const { payload: { key, value } } = action\n    return {\n      ...state,\n      [key]: value\n    }\n  } else {\n    return state\n  }\n}\n\n// store/index.js\n\nimport { normalReducer } from './normal/reducer.js'\n\nconst rootReducer = combineReducer({\n  normal: normalReducer,\n  ...\n})\n</code></pre>\n<ul>\n<li>这样我们就简单实现了一个通用的normal模块，在页面中我们可以这样使用</li>\n</ul>\n<pre><code class=\"language-js\">import * as React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\nconst Home = () => {\n  const normalState = useSelector((state) => state.normal) // 获取到了相应的normal状态值\n  const dispatch = useDispatch() // 获取dispatch函数\n\n  const changeOk = () => {\n    dispatch({\n      type: 'normal',\n      payload: {\n        key: 'isOk',\n        value: !normalState.isOk\n      }\n    })\n  }\n\n  return (\n    &#x3C;div className=\"home\">\n      &#x3C;div>{ normalState.isOk }&#x3C;/div>\n      &#x3C;button onClick={ changeOk }>点我切换状态&#x3C;/button>\n    &#x3C;/div>\n  )\n}\n</code></pre>\n<ul>\n<li>这样就更新了我们的数据状态，这样我们每次都需要写dispatch相关部分，还是有点繁琐，所以我们可以参考useState的写法，接收一个键值，返回数据值与数据操作函数，如下</li>\n</ul>\n<pre><code class=\"language-js\">// src/effect/reducer\nimport * as React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\nexport const normalReducerDispatch = (key) => {\n  const dispatch = useDispatch()\n  const normalInfo = useSelector(state => state.normal)\n  const stateValue = normalInfo[key]\n  const setNormalInfo = (value) => {\n    dispatch({\n      type: 'normal',\n      payload: {\n        key,\n        value\n      }\n    })\n  }\n  return [stateValue, setNormalInfo]\n}\n</code></pre>\n<p>// 上面封装之后我们就可以像使用useState一样来使用我们的normal模块了，在需要使用的页面引入使用即可，如下</p>\n<pre><code class=\"language-js\">// src/home.jsx\nimport * as React from 'react'\nimport { normalReducerDispatch } from 'src/effect/reducer'\n\nconst Home = () => {\n  const [isOk, setIsOk] = normalReducerDispatch('isOk')\n\n  return (\n    &#x3C;div className=\"home\">\n      &#x3C;div>{ isOk }&#x3C;/div>\n      &#x3C;button onClick={ setIsOk(!isOk) }>点我切换状态&#x3C;/button>\n    &#x3C;/div>\n  )\n}\n</code></pre>\n<ul>\n<li>这样就实现了我们上面代码同样的功能，其他需要使用redux的小模块也可以同样使用了</li>\n</ul>","frontmatter":{"title":"react hooks下封装通用redux","date":"2020-07-14","tags":["react","react hooks","redux"],"categories":"React"},"fields":{"slug":"/react_hooks/"}}},"pageContext":{"slug":"/react_hooks/"}},"staticQueryHashes":["2566592090"]}