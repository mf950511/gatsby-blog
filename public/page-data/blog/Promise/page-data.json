{"componentChunkName":"component---src-templates-blog-small-jsx","path":"/blog/Promise/","result":{"data":{"markdownRemark":{"html":"<h1>深入Promise</h1>\n<ul>\n<li>Promise中执行resolve会有一个内部值，执行reject会有一个内部理由，默认情况下，这个值跟理由都是undefined</li>\n<li>Promise中使用reject进入拒绝态时没有进行捕获会抛出错误</li>\n</ul>\n<pre><code class=\"language-js\">let p1 = Promise.resolve()\nlet p = Promise.reject()\nsetTimeout(console.log, 0, p1) // Promise {&#x3C;resolved>: undefined}\nsetTimeout(console.log, 0, p)\n// Uncaught (in promise) undefined\n// Promise {&#x3C;rejected>: undefined}\n</code></pre>\n<ul>\n<li>Promise.resolve()可以将任何值转为Promise</li>\n</ul>\n<pre><code class=\"language-js\">setTimeout(console.log, 0, Promise.resolve(3))\n// Promise {&#x3C;resolved>: 3}\n</code></pre>\n<!--more-->\n<ul>\n<li>Promise.resolve()是一个幂等方法，这个方法中，传入的参数本身是一个Promise，那么它的行为就是一个空包装</li>\n</ul>\n<pre><code class=\"language-js\">let p2 = Promise.resolve(7)\nsetTimeout(console.log, 0, p2 === Promise.resolve(p2)) // true\nsetTimeout(console.log, 0, p2 === Promise.resolve(Promise.resolve(p2))) // true\n</code></pre>\n<ul>\n<li>Promise.resolve可以包裹一个Promise，这样的话会保留原始Promise的状态</li>\n</ul>\n<pre><code class=\"language-js\">setTimeout(console.log, 0, Promise.resolve(new Promise((resolve, reject) => { }) ))   // Promise {&#x3C;pending>}\nsetTimeout(console.log, 0, Promise.resolve(Promise.resolve(3))) // Promise {&#x3C;resolved>: 3}\nsetTimeout(console.log, 0, Promise.resolve(Promise.reject(4)))  // Promise {&#x3C;rejected>: 4}\n</code></pre>\n<ul>\n<li>通过Promise.resolve可以包装任何非Promise值，包括错误对象，并将其转为解决的期约，这样做可能出现不符合预期的行为</li>\n</ul>\n<pre><code class=\"language-js\">let p3 = Promise.resolve(new Error('foo'))\nsetTimeout(console.log, 0, p3) \nsetTimeout(console.log, 0, Promise.resolve(Promise.reject(3))) \n//Promise {&#x3C;resolved>: Error: foo\n//    at &#x3C;anonymous>:1:26}\n</code></pre>\n<ul>\n<li>Promise.reject实例化一个拒绝Promise并抛出异步错误（此错误不能通过try/catch捕获，只能通过拒绝处理程序捕获）</li>\n<li>Promise.reject没有幂等的概念，给它一个Promise对象，它会自动将该对象变为拒绝的理由</li>\n</ul>\n<pre><code class=\"language-js\">setTimeout(console.log, 0, Promise.reject(new Promise((resolve, reject) => { }) ))   // Promise {&#x3C;rejected>: Promise}\nsetTimeout(console.log, 0, Promise.reject(Promise.resolve(3))) // Promise {&#x3C;rejected>: Promise}\nsetTimeout(console.log, 0, Promise.reject(Promise.reject(4)))  // Promise {&#x3C;rejected>: Promise}\n</code></pre>\n<h2>Promise.prototype.then</h2>\n<ul>\n<li>接收两个程序处理参数，均为可选，非函数类型的参数会被静默忽略</li>\n</ul>\n<pre><code class=\"language-js\">let p4 = new Promise((res, rej) => {\n  rej(4)\n})\n// 第一个参数被静默，可以捕获到异步报错\np4.then('123', (rej) => {\n  console.log(rej)\n})\n</code></pre>\n<ul>\n<li>这里的返回值会通过Promise.resolve()进行包装返回值来生成新的Promise，如果没有显示的返回语句，就包装默认返回值undefined</li>\n<li>调用then不传处理程序，则原样向后传</li>\n</ul>\n<pre><code class=\"language-js\">let p7 = Promise.resolve('foo')\nlet p8 = p7.then(() => 6) \nlet p9 = p7.then(() => {})\nlet p10 = p7.then(() => Promise.resolve())\nsetTimeout(console.log, 0, p8)   // Promise {&#x3C;resolved>: 6}\nsetTimeout(console.log, 0, p9) // Promise {&#x3C;resolved>: undefined}\nsetTimeout(console.log, 0, p10)  // Promise {&#x3C;resolved>: undefined}\n\np7.then().then(res => {\n  console.log(res) // 'foo'\n})\n</code></pre>\n<ul>\n<li>Promise.prototype.then中的onReject捕获的错误也会通过Promise.resolve包装，这样就可以捕获错误，但是不抛出异常</li>\n</ul>\n<pre><code class=\"language-js\">let p11 = Promise.reject('foo')\nlet p12 = p11.then(null, () => undefined)\nlet p13 = p11.then(null, () => {})\nlet p14 = p11.then(null, () => Promise.resolve())\nlet p15 = p11.then(null, () => Promise.reject())\nsetTimeout(console.log, 0, p12)   // Promise {&#x3C;resolved>: undefined}\nsetTimeout(console.log, 0, p13) // Promise {&#x3C;resolved>: undefined}\nsetTimeout(console.log, 0, p14)  // Promise {&#x3C;resolved>: undefined}\nsetTimeout(console.log, 0, p15)  // Promise {&#x3C;resolved>: undefined}\n// Uncaught (in promise) undefined\n</code></pre>\n<h2>Promise.prototype.catch</h2>\n<ul>\n<li>该方法用于给Promise添加拒绝处理程序，只接受一个参数，onRejct处理程序</li>\n<li>此方法是一个语法糖，相当于调用Promise.prototype.then(null, onReject)</li>\n</ul>\n<h2>Promise.prototype.finally</h2>\n<ul>\n<li>此方法在Promise取得终态时触发，无论是onResolve或者onReject，但是无法知道Promise的结果</li>\n<li>所以此代码主要用于清理无用程序，此方法返回一个新的Promise</li>\n<li>因为它与状态无关，所以它会表现为上一个Promise的状态，无论是拒绝或者解决状态</li>\n</ul>\n<pre><code class=\"language-js\">let p1 = new Promise(() => {})\nlet p2 = p1.finally()\nsetTimeout(console.log, 0, p1)  // Promise {&#x3C;pending>}\nsetTimeout(console.log, 0, p2)  // Promise {&#x3C;pending>}\nsetTimeout(console.log, 0, p1 === p2)  // false\n\nlet p3 = Promise.resolve(1)\nlet p4 = Promise.reject(2)\nlet p5 = new Promise(() => {})\n\n// 原样后传\nlet p6 = p3.finally()\nlet p7 = p3.finally(() => {})\nlet p8 = p3.finally(() => undefined)\nlet p9 = p3.finally(() => Promise.resolve(3))\nlet p10 = p3.finally(() => Error('bar'))\nlet p11 = p4.finally()\nlet p12 = p5.finally()\n\nsetTimeout(console.log, 0, p6)  // Promise {&#x3C;resolved>: 1}\nsetTimeout(console.log, 0, p7)  // Promise {&#x3C;resolved>: 1}\nsetTimeout(console.log, 0, p8)  // Promise {&#x3C;resolved>: 1}\nsetTimeout(console.log, 0, p9)  // Promise {&#x3C;resolved>: 1}\nsetTimeout(console.log, 0, p10)  // Promise {&#x3C;resolved>: 1}\nsetTimeout(console.log, 0, p11)  // Promise {&#x3C;rejected>: 2}\nsetTimeout(console.log, 0, p12)  // Promise {&#x3C;pending>}\n</code></pre>\n<ul>\n<li>如果返回了一个待定的Promise或者在onFinally中抛出了错误（显式抛出或者返回拒绝Promise），则会返回拒绝态的Promise</li>\n</ul>\n<pre><code class=\"language-js\">let p1 = new Promise((resolve) => { resolve('foo') })\nlet p2 = p1.finally(() => Promise.reject())\nlet p3 = p1.finally(() => { throw 'bar' })\nsetTimeout(console.log, 0, p2)  // Promise {&#x3C;rejected>: undefined}\nsetTimeout(console.log, 0, p3)  // Promise {&#x3C;rejected>: \"bar\"}\n</code></pre>\n<ul>\n<li>Promise获得状态后，与该状态相关的处理程序只是被排期，并非立即执行，跟在添加这个处理程序的代码之后的同步代码一定会在处理程序之前执行</li>\n</ul>\n<pre><code class=\"language-js\">let synchronousResolve\nlet p = new Promise((resolve) => {\n  synchronousResolve = function(){\n    console.log('1: invoking resove')\n    resolve()\n    console.log('2: resolve return')\n  }\n})\np.then(() => console.log('4 then handler execute'))\nsynchronousResolve()\nconsole.log('3 synchronousResolve')\n\n// 1: invoking resove\n// 2: resolve return\n// 3 synchronousResolve\n// 4 then handler execute\n</code></pre>\n<h2>串行Promise合成</h2>\n<ul>\n<li>Promise主要特征还有：异步产生值并传给处理程序，后续处理程序可以使用这个值，很像函数合成</li>\n</ul>\n<pre><code class=\"language-js\">function addTwo(x){\n  return x + 2\n}\nfunction addThree(x){\n  return x + 3\n}\nfunction addFive(x){\n  return x + 5\n}\n\nfunction addTen(x) {\n  return addFive(addThree(addTwo(x)))\n}\n\naddTen(5) // 15\n\n// 使用Promise实现\nfunction addTwo(x){\n  return x + 2\n}\nfunction addThree(x){\n  return x + 3\n}\nfunction addFive(x){\n  return x + 5\n}\n\nfunction addTen(x) {\n  return [addTwo, addThree, addFive].reduce((promise, fn) => promise.then(fn), Promise.resolve(x))\n}\naddTen(8).then(console.log) // 18\n\n\n// 拓展实现\n\nfunction addTwo(x){\n  return x + 2\n}\nfunction addThree(x){\n  return x + 3\n}\nfunction addFive(x){\n  return x + 5\n}\nfunction compose(...fns) {\n  return (x) => fns.reduce((promise, fn) => promise.then(fn), Promise.resolve(x))\n}\nlet addTen = compose(addTwo, addThree, addFive)\naddTen(10).then(console.log) // 20\n</code></pre>\n<h2>async/await</h2>\n<ul>\n<li>async关键字用于声明异步函数。使用async可以让函数具有异步特征，但总体上代码仍然是同步求值</li>\n<li>参数与闭包方面，异步函数跟普通函数有一样的行为</li>\n</ul>\n<pre><code class=\"language-js\">async function foo(){\n  console.log(1)\n}\nconsole.log(2)\n\n// 1\n// 2\n</code></pre>\n<ul>\n<li>如果异步函数使用return关键字返回了值（没有return会返回undefined），这个值会被Promise.resolve()包装成Promise对象。</li>\n<li>异步函数始终返回Promise对象，函数外部调用该函数可以得到它返回的Promise</li>\n</ul>\n<pre><code class=\"language-js\">async function foo(){\n  console.log(1)\n  return 3\n}\nfoo().then(console.log)\nconsole.log(2)\n\n// 1\n// 2\n// 3\n\n// 跟直接返回一个Promise对象效果一致\nasync function foo(){\n  console.log(1)\n  return Promise.resolve(3)\n}\nfoo().then(console.log)\nconsole.log(2)\n\n// 1\n// 2\n// 3\n</code></pre>\n<ul>\n<li>异步函数返回值期待（但不要求）一个实现thenable接口的对象，但是常规的值也可以。如果返回的是实现thenable接口的对象，则这个对象可以由提供给then()的处理程序进行解包。如果不是，返回值就被当做已经解决的Promise</li>\n</ul>\n<pre><code class=\"language-js\">async function foo(){\n  return 'foo'\n}\nfoo().then(console.log) // foo\n\nasync function baz(){\n  const thenable = {\n    then(callback) {\n      callback('baz')\n    }\n  }\n  return thenable\n}\nbaz().then(console.log) // baz\n</code></pre>\n<ul>\n<li>在与Promise中一样，在异步函数中抛出错误会返回拒绝的Promise</li>\n</ul>\n<pre><code class=\"language-js\">async function foo(){\n  console.log(1)\n  throw 3\n}\nfoo().catch(console.log)\nconsole.log(2)\n\n// 1\n// 2\n// 3\n</code></pre>\n<ul>\n<li>拒绝Promise的错误不会被异步函数捕获（catch跟then中都无法取值）</li>\n</ul>\n<pre><code class=\"language-js\">async function foo(){\n  console.log(1)\n  Promise.reject(3)\n}\nfoo().catch(console.log).then(console.log)\nconsole.log(2)\n\n// 1\n// 2\n// VM1328:3 Uncaught (in promise) 3\n</code></pre>\n<ul>\n<li>await可以暂停异步函数代码的执行，等待Promise解决</li>\n<li>await会暂停执行异步函数后面的代码，让出JavaScript运行中的执行线程。这个行为跟生成器函数中的yield关键字是一样的</li>\n<li>await同样会尝试解包对象的值，然后将这个值传给表达式，再异步恢复异步函数的执行</li>\n</ul>\n<pre><code class=\"language-js\">async function foo(){\n  console.log(await Promise.resolve('foo'))\n}\nfoo() // foo\n\nasync function bar(){\n  return await Promise.resolve('bar')\n}\nbar().then(console.log) // bar\n</code></pre>\n<ul>\n<li>await关键字期待（但不要求）一个实现thenable接口的对象，但常规值也可以</li>\n<li>如果是实现了thenable接口的对象，await会由await来解包，如果不是，就当做已经解决的Promise</li>\n</ul>\n<pre><code class=\"language-js\">async function bar(){\n  console.log(await ['bar'])\n}\nbar() // [\"bar\"]\n\nasync function baz(){\n  const thenable = {\n    then(callback){\n      callback('baz')\n    }\n  }\n  console.log(await thenable)\n}\nbaz() // baz\n</code></pre>\n<ul>\n<li>等待会抛出错误的同步操作，返回拒绝的期约</li>\n</ul>\n<pre><code class=\"language-js\">async function foo(){\n  console.log(1)\n  await (() => { throw 3 })()\n}\nfoo().catch(console.log)\nconsole.log(2)\n\n// 1\n// 2\n// 3\n</code></pre>\n<ul>\n<li>async中我们说到，单独的Promise.reject()不会被异步函数捕获，而是抛出未捕获错误。不过，对拒绝Promise使用await会释放错误值（将拒绝Promise返回）</li>\n</ul>\n<pre><code class=\"language-js\">async function foo(){\n  console.log(1)\n  await Promise.reject(3)\n  console.log(4) // 这行代码不执行\n}\nfoo().catch(console.log)\nconsole.log(2)\n\n// 1\n// 2\n// 3\n</code></pre>\n<ul>\n<li>await必须在异步函数中使用，不能在顶级上下文如<code>&#x3C;script></code>标签或者模块中使用，同步函数中使用await会抛出SyntaxError</li>\n<li>使用await还有一些细微之处，看下面的例子</li>\n</ul>\n<pre><code class=\"language-js\">async function foo(){\n  console.log(await Promise.resolve('foo'))\n}\nasync function bar(){\n  console.log(await 'bar')\n}\nasync function baz(){\n  console.log('baz')\n}\nfoo()\nbar()\nbaz()\n\n// baz\n// bar\n// foo\n</code></pre>\n<ul>\n<li>async/await组合中，起作用的都是await，async只是一个标识符</li>\n<li>JavaScript运行时遇到await关键字会记录在哪暂停执行。等待await右边的值可以用了，JavaScript会向消息队列中推送一个任务，任务会恢复异步函数的执行</li>\n<li>所以await后面哪怕跟了可用的值，函数的其他部分也会被异步求值</li>\n</ul>\n<pre><code class=\"language-js\">async function foo(){\n  console.log(2)\n  await null\n  console.log(4)\n}\nconsole.log(1)\nfoo()\nconsole.log(3)\n\n// 1\n// 2\n// 3\n// 4\n</code></pre>\n<ul>\n<li>\n<p>上面的执行过程可以这么解读</p>\n<ul>\n<li>打印1</li>\n<li>调用异步函数foo</li>\n<li>打印2</li>\n<li>await暂停执行，为立即可用的值null向消息队列添加一个任务</li>\n<li>foo退出</li>\n<li>打印3</li>\n<li>同步线程代码执行完成</li>\n<li>JavaScript运行时从消息队列取出任务，恢复异步执行函数</li>\n<li>foo中恢复执行，await取得null值</li>\n<li>打印4</li>\n<li>foo返回</li>\n</ul>\n</li>\n<li>当await后面是一个Promise的时候会复杂一些。这个时候，为了执行异步函数，实际有两个任务被添加到消息队列并异步求值(11TC39对await后面是Promise的情况做过处理，导致只会生成一个异步任务，因此新版浏览器中会打印 123458967)</li>\n</ul>\n<pre><code class=\"language-js\">async function foo(){\n  console.log(2)\n  console.log(await Promise.resolve(8))\n  console.log(9)\n}\n\nasync function bar(){\n  console.log(4)\n  console.log(await 6)\n  console.log(7)\n}\n\nconsole.log(1)\nfoo()\nconsole.log(3)\nbar()\nconsole.log(5)\n\n// 1\n// 2\n// 3\n// 4\n// 5\n// 6\n// 7\n// 8\n// 9\n</code></pre>\n<ul>\n<li>\n<p>运行时步骤如下</p>\n<ul>\n<li>打印1</li>\n<li>调用foo</li>\n<li>打印2</li>\n<li>await暂停执行，向消息队列添加一个Promise在落定后执行的任务</li>\n<li>Promise立即落定，把给await提供值的任务添加到消息队列</li>\n<li>foo退出</li>\n<li>打印3</li>\n<li>调用bar</li>\n<li>打印4</li>\n<li>await关键字暂停执行，为立即可用的值6向消息队列中添加任务</li>\n<li>bar退出</li>\n<li>打印5</li>\n<li>顶级线程执行完成</li>\n<li>JavaScript从消息队列中取出解决awaitPromise的处理程序，将解决值8提供给它</li>\n<li>JavaScript运行时向消息队列中添加一个恢复foo执行的任务</li>\n<li>JavaScript运行时从消息队列中取出恢复执行bar的任务及6</li>\n<li>bar恢复执行，await取得6</li>\n<li>打印7</li>\n<li>bar返回</li>\n<li>异步任务完成，JavaScript从消息队列中取出恢复foo的任务及8</li>\n<li>打印8</li>\n<li>打印9</li>\n<li>foo返回</li>\n</ul>\n</li>\n<li>使用async跟await将上面的串行Promise进行优化</li>\n</ul>\n<pre><code class=\"language-js\">async function addTwo(x){\n  return x + 2\n}\nasync function addThree(x){\n  return x + 3\n}\nasync function addFive(x){\n  return x + 5\n}\n\nasync function addTen(x) {\n  for(const fn of [addTwo, addThree, addFive]) {\n    x = await fn(x)\n  }\n  return x\n}\naddTen(9).then(console.log) // 19\n</code></pre>\n<ul>\n<li>在栈管理与内存管理中，Promise会尽可能的保留完整的调用栈，这样在抛出错误时就会更好地找到错误信息位置，但是这也意味着栈追踪信息会占用内存，带来计算与存储成本。</li>\n<li>而异步函数中JavaScript运行时会简单地在嵌套函数中存储指向包含函数的指针。这个指针存在于内存中，用于出错时追踪信息。这样就不会带来而外的消耗</li>\n<li>所以在重视性能的应用中优先考虑异步函数</li>\n</ul>","frontmatter":{"title":"深入Promise--高程4","date":"2020-12-14","tags":["JavaScript回顾"],"categories":"JavaScript"},"fields":{"slug":"/Promise/"}}},"pageContext":{"slug":"/Promise/"}},"staticQueryHashes":["2566592090"]}